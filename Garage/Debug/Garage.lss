
Garage.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001470  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000004e  00800060  00001470  00001504  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  008000ae  008000ae  00001552  2**0
                  ALLOC
  3 .stab         00001df4  00000000  00000000  00001554  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000644  00000000  00000000  00003348  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000200  00000000  00000000  00003990  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000199d  00000000  00000000  00003b90  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008f2  00000000  00000000  0000552d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001077  00000000  00000000  00005e1f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003e4  00000000  00000000  00006e98  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000532  00000000  00000000  0000727c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000fe5  00000000  00000000  000077ae  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 38 07 	jmp	0xe70	; 0xe70 <__vector_1>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 d5 05 	jmp	0xbaa	; 0xbaa <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 92 07 	jmp	0xf24	; 0xf24 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e7       	ldi	r30, 0x70	; 112
      68:	f4 e1       	ldi	r31, 0x14	; 20
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	ae 3a       	cpi	r26, 0xAE	; 174
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	ae ea       	ldi	r26, 0xAE	; 174
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a6 3b       	cpi	r26, 0xB6	; 182
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 ab 03 	call	0x756	; 0x756 <main>
      8a:	0c 94 36 0a 	jmp	0x146c	; 0x146c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <ADC_vinit>:
      92:	37 9a       	sbi	0x06, 7	; 6
      94:	3f 9a       	sbi	0x07, 7	; 7
      96:	3e 9a       	sbi	0x07, 6	; 7
      98:	32 9a       	sbi	0x06, 2	; 6
      9a:	31 9a       	sbi	0x06, 1	; 6
      9c:	08 95       	ret

0000009e <ADC_u16read>:
      9e:	36 9a       	sbi	0x06, 6	; 6
      a0:	36 99       	sbic	0x06, 6	; 6
      a2:	fe cf       	rjmp	.-4      	; 0xa0 <ADC_u16read+0x2>
      a4:	84 b1       	in	r24, 0x04	; 4
      a6:	90 e0       	ldi	r25, 0x00	; 0
      a8:	45 b1       	in	r20, 0x05	; 5
      aa:	34 2f       	mov	r19, r20
      ac:	20 e0       	ldi	r18, 0x00	; 0
      ae:	82 2b       	or	r24, r18
      b0:	93 2b       	or	r25, r19
      b2:	08 95       	ret

000000b4 <DIO_vsetPINDir>:
      b4:	84 34       	cpi	r24, 0x44	; 68
      b6:	09 f4       	brne	.+2      	; 0xba <DIO_vsetPINDir+0x6>
      b8:	71 c0       	rjmp	.+226    	; 0x19c <DIO_vsetPINDir+0xe8>
      ba:	85 34       	cpi	r24, 0x45	; 69
      bc:	48 f4       	brcc	.+18     	; 0xd0 <DIO_vsetPINDir+0x1c>
      be:	82 34       	cpi	r24, 0x42	; 66
      c0:	99 f1       	breq	.+102    	; 0x128 <DIO_vsetPINDir+0x74>
      c2:	83 34       	cpi	r24, 0x43	; 67
      c4:	08 f0       	brcs	.+2      	; 0xc8 <DIO_vsetPINDir+0x14>
      c6:	4d c0       	rjmp	.+154    	; 0x162 <DIO_vsetPINDir+0xae>
      c8:	81 34       	cpi	r24, 0x41	; 65
      ca:	09 f0       	breq	.+2      	; 0xce <DIO_vsetPINDir+0x1a>
      cc:	83 c0       	rjmp	.+262    	; 0x1d4 <DIO_vsetPINDir+0x120>
      ce:	0f c0       	rjmp	.+30     	; 0xee <DIO_vsetPINDir+0x3a>
      d0:	82 36       	cpi	r24, 0x62	; 98
      d2:	51 f1       	breq	.+84     	; 0x128 <DIO_vsetPINDir+0x74>
      d4:	83 36       	cpi	r24, 0x63	; 99
      d6:	20 f4       	brcc	.+8      	; 0xe0 <DIO_vsetPINDir+0x2c>
      d8:	81 36       	cpi	r24, 0x61	; 97
      da:	09 f0       	breq	.+2      	; 0xde <DIO_vsetPINDir+0x2a>
      dc:	7b c0       	rjmp	.+246    	; 0x1d4 <DIO_vsetPINDir+0x120>
      de:	07 c0       	rjmp	.+14     	; 0xee <DIO_vsetPINDir+0x3a>
      e0:	83 36       	cpi	r24, 0x63	; 99
      e2:	09 f4       	brne	.+2      	; 0xe6 <DIO_vsetPINDir+0x32>
      e4:	3e c0       	rjmp	.+124    	; 0x162 <DIO_vsetPINDir+0xae>
      e6:	84 36       	cpi	r24, 0x64	; 100
      e8:	09 f0       	breq	.+2      	; 0xec <DIO_vsetPINDir+0x38>
      ea:	74 c0       	rjmp	.+232    	; 0x1d4 <DIO_vsetPINDir+0x120>
      ec:	57 c0       	rjmp	.+174    	; 0x19c <DIO_vsetPINDir+0xe8>
      ee:	41 30       	cpi	r20, 0x01	; 1
      f0:	69 f4       	brne	.+26     	; 0x10c <DIO_vsetPINDir+0x58>
      f2:	2a b3       	in	r18, 0x1a	; 26
      f4:	81 e0       	ldi	r24, 0x01	; 1
      f6:	90 e0       	ldi	r25, 0x00	; 0
      f8:	ac 01       	movw	r20, r24
      fa:	02 c0       	rjmp	.+4      	; 0x100 <DIO_vsetPINDir+0x4c>
      fc:	44 0f       	add	r20, r20
      fe:	55 1f       	adc	r21, r21
     100:	6a 95       	dec	r22
     102:	e2 f7       	brpl	.-8      	; 0xfc <DIO_vsetPINDir+0x48>
     104:	ba 01       	movw	r22, r20
     106:	62 2b       	or	r22, r18
     108:	6a bb       	out	0x1a, r22	; 26
     10a:	08 95       	ret
     10c:	2a b3       	in	r18, 0x1a	; 26
     10e:	81 e0       	ldi	r24, 0x01	; 1
     110:	90 e0       	ldi	r25, 0x00	; 0
     112:	ac 01       	movw	r20, r24
     114:	02 c0       	rjmp	.+4      	; 0x11a <DIO_vsetPINDir+0x66>
     116:	44 0f       	add	r20, r20
     118:	55 1f       	adc	r21, r21
     11a:	6a 95       	dec	r22
     11c:	e2 f7       	brpl	.-8      	; 0x116 <DIO_vsetPINDir+0x62>
     11e:	ba 01       	movw	r22, r20
     120:	60 95       	com	r22
     122:	62 23       	and	r22, r18
     124:	6a bb       	out	0x1a, r22	; 26
     126:	08 95       	ret
     128:	41 30       	cpi	r20, 0x01	; 1
     12a:	69 f4       	brne	.+26     	; 0x146 <DIO_vsetPINDir+0x92>
     12c:	27 b3       	in	r18, 0x17	; 23
     12e:	81 e0       	ldi	r24, 0x01	; 1
     130:	90 e0       	ldi	r25, 0x00	; 0
     132:	ac 01       	movw	r20, r24
     134:	02 c0       	rjmp	.+4      	; 0x13a <DIO_vsetPINDir+0x86>
     136:	44 0f       	add	r20, r20
     138:	55 1f       	adc	r21, r21
     13a:	6a 95       	dec	r22
     13c:	e2 f7       	brpl	.-8      	; 0x136 <DIO_vsetPINDir+0x82>
     13e:	ba 01       	movw	r22, r20
     140:	62 2b       	or	r22, r18
     142:	67 bb       	out	0x17, r22	; 23
     144:	08 95       	ret
     146:	27 b3       	in	r18, 0x17	; 23
     148:	81 e0       	ldi	r24, 0x01	; 1
     14a:	90 e0       	ldi	r25, 0x00	; 0
     14c:	ac 01       	movw	r20, r24
     14e:	02 c0       	rjmp	.+4      	; 0x154 <DIO_vsetPINDir+0xa0>
     150:	44 0f       	add	r20, r20
     152:	55 1f       	adc	r21, r21
     154:	6a 95       	dec	r22
     156:	e2 f7       	brpl	.-8      	; 0x150 <DIO_vsetPINDir+0x9c>
     158:	ba 01       	movw	r22, r20
     15a:	60 95       	com	r22
     15c:	62 23       	and	r22, r18
     15e:	67 bb       	out	0x17, r22	; 23
     160:	08 95       	ret
     162:	41 30       	cpi	r20, 0x01	; 1
     164:	69 f4       	brne	.+26     	; 0x180 <DIO_vsetPINDir+0xcc>
     166:	24 b3       	in	r18, 0x14	; 20
     168:	81 e0       	ldi	r24, 0x01	; 1
     16a:	90 e0       	ldi	r25, 0x00	; 0
     16c:	ac 01       	movw	r20, r24
     16e:	02 c0       	rjmp	.+4      	; 0x174 <DIO_vsetPINDir+0xc0>
     170:	44 0f       	add	r20, r20
     172:	55 1f       	adc	r21, r21
     174:	6a 95       	dec	r22
     176:	e2 f7       	brpl	.-8      	; 0x170 <DIO_vsetPINDir+0xbc>
     178:	ba 01       	movw	r22, r20
     17a:	62 2b       	or	r22, r18
     17c:	64 bb       	out	0x14, r22	; 20
     17e:	08 95       	ret
     180:	24 b3       	in	r18, 0x14	; 20
     182:	81 e0       	ldi	r24, 0x01	; 1
     184:	90 e0       	ldi	r25, 0x00	; 0
     186:	ac 01       	movw	r20, r24
     188:	02 c0       	rjmp	.+4      	; 0x18e <DIO_vsetPINDir+0xda>
     18a:	44 0f       	add	r20, r20
     18c:	55 1f       	adc	r21, r21
     18e:	6a 95       	dec	r22
     190:	e2 f7       	brpl	.-8      	; 0x18a <DIO_vsetPINDir+0xd6>
     192:	ba 01       	movw	r22, r20
     194:	60 95       	com	r22
     196:	62 23       	and	r22, r18
     198:	64 bb       	out	0x14, r22	; 20
     19a:	08 95       	ret
     19c:	41 30       	cpi	r20, 0x01	; 1
     19e:	69 f4       	brne	.+26     	; 0x1ba <DIO_vsetPINDir+0x106>
     1a0:	21 b3       	in	r18, 0x11	; 17
     1a2:	81 e0       	ldi	r24, 0x01	; 1
     1a4:	90 e0       	ldi	r25, 0x00	; 0
     1a6:	ac 01       	movw	r20, r24
     1a8:	02 c0       	rjmp	.+4      	; 0x1ae <DIO_vsetPINDir+0xfa>
     1aa:	44 0f       	add	r20, r20
     1ac:	55 1f       	adc	r21, r21
     1ae:	6a 95       	dec	r22
     1b0:	e2 f7       	brpl	.-8      	; 0x1aa <DIO_vsetPINDir+0xf6>
     1b2:	ba 01       	movw	r22, r20
     1b4:	62 2b       	or	r22, r18
     1b6:	61 bb       	out	0x11, r22	; 17
     1b8:	08 95       	ret
     1ba:	21 b3       	in	r18, 0x11	; 17
     1bc:	81 e0       	ldi	r24, 0x01	; 1
     1be:	90 e0       	ldi	r25, 0x00	; 0
     1c0:	ac 01       	movw	r20, r24
     1c2:	02 c0       	rjmp	.+4      	; 0x1c8 <DIO_vsetPINDir+0x114>
     1c4:	44 0f       	add	r20, r20
     1c6:	55 1f       	adc	r21, r21
     1c8:	6a 95       	dec	r22
     1ca:	e2 f7       	brpl	.-8      	; 0x1c4 <DIO_vsetPINDir+0x110>
     1cc:	ba 01       	movw	r22, r20
     1ce:	60 95       	com	r22
     1d0:	62 23       	and	r22, r18
     1d2:	61 bb       	out	0x11, r22	; 17
     1d4:	08 95       	ret

000001d6 <DIO_vwritePIN>:
     1d6:	84 34       	cpi	r24, 0x44	; 68
     1d8:	09 f4       	brne	.+2      	; 0x1dc <DIO_vwritePIN+0x6>
     1da:	71 c0       	rjmp	.+226    	; 0x2be <DIO_vwritePIN+0xe8>
     1dc:	85 34       	cpi	r24, 0x45	; 69
     1de:	48 f4       	brcc	.+18     	; 0x1f2 <DIO_vwritePIN+0x1c>
     1e0:	82 34       	cpi	r24, 0x42	; 66
     1e2:	99 f1       	breq	.+102    	; 0x24a <DIO_vwritePIN+0x74>
     1e4:	83 34       	cpi	r24, 0x43	; 67
     1e6:	08 f0       	brcs	.+2      	; 0x1ea <DIO_vwritePIN+0x14>
     1e8:	4d c0       	rjmp	.+154    	; 0x284 <DIO_vwritePIN+0xae>
     1ea:	81 34       	cpi	r24, 0x41	; 65
     1ec:	09 f0       	breq	.+2      	; 0x1f0 <DIO_vwritePIN+0x1a>
     1ee:	83 c0       	rjmp	.+262    	; 0x2f6 <DIO_vwritePIN+0x120>
     1f0:	0f c0       	rjmp	.+30     	; 0x210 <DIO_vwritePIN+0x3a>
     1f2:	82 36       	cpi	r24, 0x62	; 98
     1f4:	51 f1       	breq	.+84     	; 0x24a <DIO_vwritePIN+0x74>
     1f6:	83 36       	cpi	r24, 0x63	; 99
     1f8:	20 f4       	brcc	.+8      	; 0x202 <DIO_vwritePIN+0x2c>
     1fa:	81 36       	cpi	r24, 0x61	; 97
     1fc:	09 f0       	breq	.+2      	; 0x200 <DIO_vwritePIN+0x2a>
     1fe:	7b c0       	rjmp	.+246    	; 0x2f6 <DIO_vwritePIN+0x120>
     200:	07 c0       	rjmp	.+14     	; 0x210 <DIO_vwritePIN+0x3a>
     202:	83 36       	cpi	r24, 0x63	; 99
     204:	09 f4       	brne	.+2      	; 0x208 <DIO_vwritePIN+0x32>
     206:	3e c0       	rjmp	.+124    	; 0x284 <DIO_vwritePIN+0xae>
     208:	84 36       	cpi	r24, 0x64	; 100
     20a:	09 f0       	breq	.+2      	; 0x20e <DIO_vwritePIN+0x38>
     20c:	74 c0       	rjmp	.+232    	; 0x2f6 <DIO_vwritePIN+0x120>
     20e:	57 c0       	rjmp	.+174    	; 0x2be <DIO_vwritePIN+0xe8>
     210:	41 30       	cpi	r20, 0x01	; 1
     212:	69 f4       	brne	.+26     	; 0x22e <DIO_vwritePIN+0x58>
     214:	2b b3       	in	r18, 0x1b	; 27
     216:	81 e0       	ldi	r24, 0x01	; 1
     218:	90 e0       	ldi	r25, 0x00	; 0
     21a:	ac 01       	movw	r20, r24
     21c:	02 c0       	rjmp	.+4      	; 0x222 <DIO_vwritePIN+0x4c>
     21e:	44 0f       	add	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	e2 f7       	brpl	.-8      	; 0x21e <DIO_vwritePIN+0x48>
     226:	ba 01       	movw	r22, r20
     228:	62 2b       	or	r22, r18
     22a:	6b bb       	out	0x1b, r22	; 27
     22c:	08 95       	ret
     22e:	2b b3       	in	r18, 0x1b	; 27
     230:	81 e0       	ldi	r24, 0x01	; 1
     232:	90 e0       	ldi	r25, 0x00	; 0
     234:	ac 01       	movw	r20, r24
     236:	02 c0       	rjmp	.+4      	; 0x23c <DIO_vwritePIN+0x66>
     238:	44 0f       	add	r20, r20
     23a:	55 1f       	adc	r21, r21
     23c:	6a 95       	dec	r22
     23e:	e2 f7       	brpl	.-8      	; 0x238 <DIO_vwritePIN+0x62>
     240:	ba 01       	movw	r22, r20
     242:	60 95       	com	r22
     244:	62 23       	and	r22, r18
     246:	6b bb       	out	0x1b, r22	; 27
     248:	08 95       	ret
     24a:	41 30       	cpi	r20, 0x01	; 1
     24c:	69 f4       	brne	.+26     	; 0x268 <DIO_vwritePIN+0x92>
     24e:	28 b3       	in	r18, 0x18	; 24
     250:	81 e0       	ldi	r24, 0x01	; 1
     252:	90 e0       	ldi	r25, 0x00	; 0
     254:	ac 01       	movw	r20, r24
     256:	02 c0       	rjmp	.+4      	; 0x25c <DIO_vwritePIN+0x86>
     258:	44 0f       	add	r20, r20
     25a:	55 1f       	adc	r21, r21
     25c:	6a 95       	dec	r22
     25e:	e2 f7       	brpl	.-8      	; 0x258 <DIO_vwritePIN+0x82>
     260:	ba 01       	movw	r22, r20
     262:	62 2b       	or	r22, r18
     264:	68 bb       	out	0x18, r22	; 24
     266:	08 95       	ret
     268:	28 b3       	in	r18, 0x18	; 24
     26a:	81 e0       	ldi	r24, 0x01	; 1
     26c:	90 e0       	ldi	r25, 0x00	; 0
     26e:	ac 01       	movw	r20, r24
     270:	02 c0       	rjmp	.+4      	; 0x276 <DIO_vwritePIN+0xa0>
     272:	44 0f       	add	r20, r20
     274:	55 1f       	adc	r21, r21
     276:	6a 95       	dec	r22
     278:	e2 f7       	brpl	.-8      	; 0x272 <DIO_vwritePIN+0x9c>
     27a:	ba 01       	movw	r22, r20
     27c:	60 95       	com	r22
     27e:	62 23       	and	r22, r18
     280:	68 bb       	out	0x18, r22	; 24
     282:	08 95       	ret
     284:	41 30       	cpi	r20, 0x01	; 1
     286:	69 f4       	brne	.+26     	; 0x2a2 <DIO_vwritePIN+0xcc>
     288:	25 b3       	in	r18, 0x15	; 21
     28a:	81 e0       	ldi	r24, 0x01	; 1
     28c:	90 e0       	ldi	r25, 0x00	; 0
     28e:	ac 01       	movw	r20, r24
     290:	02 c0       	rjmp	.+4      	; 0x296 <DIO_vwritePIN+0xc0>
     292:	44 0f       	add	r20, r20
     294:	55 1f       	adc	r21, r21
     296:	6a 95       	dec	r22
     298:	e2 f7       	brpl	.-8      	; 0x292 <DIO_vwritePIN+0xbc>
     29a:	ba 01       	movw	r22, r20
     29c:	62 2b       	or	r22, r18
     29e:	65 bb       	out	0x15, r22	; 21
     2a0:	08 95       	ret
     2a2:	25 b3       	in	r18, 0x15	; 21
     2a4:	81 e0       	ldi	r24, 0x01	; 1
     2a6:	90 e0       	ldi	r25, 0x00	; 0
     2a8:	ac 01       	movw	r20, r24
     2aa:	02 c0       	rjmp	.+4      	; 0x2b0 <DIO_vwritePIN+0xda>
     2ac:	44 0f       	add	r20, r20
     2ae:	55 1f       	adc	r21, r21
     2b0:	6a 95       	dec	r22
     2b2:	e2 f7       	brpl	.-8      	; 0x2ac <DIO_vwritePIN+0xd6>
     2b4:	ba 01       	movw	r22, r20
     2b6:	60 95       	com	r22
     2b8:	62 23       	and	r22, r18
     2ba:	65 bb       	out	0x15, r22	; 21
     2bc:	08 95       	ret
     2be:	41 30       	cpi	r20, 0x01	; 1
     2c0:	69 f4       	brne	.+26     	; 0x2dc <DIO_vwritePIN+0x106>
     2c2:	22 b3       	in	r18, 0x12	; 18
     2c4:	81 e0       	ldi	r24, 0x01	; 1
     2c6:	90 e0       	ldi	r25, 0x00	; 0
     2c8:	ac 01       	movw	r20, r24
     2ca:	02 c0       	rjmp	.+4      	; 0x2d0 <DIO_vwritePIN+0xfa>
     2cc:	44 0f       	add	r20, r20
     2ce:	55 1f       	adc	r21, r21
     2d0:	6a 95       	dec	r22
     2d2:	e2 f7       	brpl	.-8      	; 0x2cc <DIO_vwritePIN+0xf6>
     2d4:	ba 01       	movw	r22, r20
     2d6:	62 2b       	or	r22, r18
     2d8:	62 bb       	out	0x12, r22	; 18
     2da:	08 95       	ret
     2dc:	22 b3       	in	r18, 0x12	; 18
     2de:	81 e0       	ldi	r24, 0x01	; 1
     2e0:	90 e0       	ldi	r25, 0x00	; 0
     2e2:	ac 01       	movw	r20, r24
     2e4:	02 c0       	rjmp	.+4      	; 0x2ea <DIO_vwritePIN+0x114>
     2e6:	44 0f       	add	r20, r20
     2e8:	55 1f       	adc	r21, r21
     2ea:	6a 95       	dec	r22
     2ec:	e2 f7       	brpl	.-8      	; 0x2e6 <DIO_vwritePIN+0x110>
     2ee:	ba 01       	movw	r22, r20
     2f0:	60 95       	com	r22
     2f2:	62 23       	and	r22, r18
     2f4:	62 bb       	out	0x12, r22	; 18
     2f6:	08 95       	ret

000002f8 <DIO_vtogglePIN>:
     2f8:	84 34       	cpi	r24, 0x44	; 68
     2fa:	09 f4       	brne	.+2      	; 0x2fe <DIO_vtogglePIN+0x6>
     2fc:	3d c0       	rjmp	.+122    	; 0x378 <DIO_vtogglePIN+0x80>
     2fe:	85 34       	cpi	r24, 0x45	; 69
     300:	40 f4       	brcc	.+16     	; 0x312 <DIO_vtogglePIN+0x1a>
     302:	82 34       	cpi	r24, 0x42	; 66
     304:	f9 f0       	breq	.+62     	; 0x344 <DIO_vtogglePIN+0x4c>
     306:	83 34       	cpi	r24, 0x43	; 67
     308:	50 f5       	brcc	.+84     	; 0x35e <DIO_vtogglePIN+0x66>
     30a:	81 34       	cpi	r24, 0x41	; 65
     30c:	09 f0       	breq	.+2      	; 0x310 <DIO_vtogglePIN+0x18>
     30e:	40 c0       	rjmp	.+128    	; 0x390 <DIO_vtogglePIN+0x98>
     310:	0c c0       	rjmp	.+24     	; 0x32a <DIO_vtogglePIN+0x32>
     312:	82 36       	cpi	r24, 0x62	; 98
     314:	b9 f0       	breq	.+46     	; 0x344 <DIO_vtogglePIN+0x4c>
     316:	83 36       	cpi	r24, 0x63	; 99
     318:	18 f4       	brcc	.+6      	; 0x320 <DIO_vtogglePIN+0x28>
     31a:	81 36       	cpi	r24, 0x61	; 97
     31c:	c9 f5       	brne	.+114    	; 0x390 <DIO_vtogglePIN+0x98>
     31e:	05 c0       	rjmp	.+10     	; 0x32a <DIO_vtogglePIN+0x32>
     320:	83 36       	cpi	r24, 0x63	; 99
     322:	e9 f0       	breq	.+58     	; 0x35e <DIO_vtogglePIN+0x66>
     324:	84 36       	cpi	r24, 0x64	; 100
     326:	a1 f5       	brne	.+104    	; 0x390 <DIO_vtogglePIN+0x98>
     328:	27 c0       	rjmp	.+78     	; 0x378 <DIO_vtogglePIN+0x80>
     32a:	2b b3       	in	r18, 0x1b	; 27
     32c:	81 e0       	ldi	r24, 0x01	; 1
     32e:	90 e0       	ldi	r25, 0x00	; 0
     330:	ac 01       	movw	r20, r24
     332:	02 c0       	rjmp	.+4      	; 0x338 <DIO_vtogglePIN+0x40>
     334:	44 0f       	add	r20, r20
     336:	55 1f       	adc	r21, r21
     338:	6a 95       	dec	r22
     33a:	e2 f7       	brpl	.-8      	; 0x334 <DIO_vtogglePIN+0x3c>
     33c:	ba 01       	movw	r22, r20
     33e:	62 27       	eor	r22, r18
     340:	6b bb       	out	0x1b, r22	; 27
     342:	08 95       	ret
     344:	28 b3       	in	r18, 0x18	; 24
     346:	81 e0       	ldi	r24, 0x01	; 1
     348:	90 e0       	ldi	r25, 0x00	; 0
     34a:	ac 01       	movw	r20, r24
     34c:	02 c0       	rjmp	.+4      	; 0x352 <DIO_vtogglePIN+0x5a>
     34e:	44 0f       	add	r20, r20
     350:	55 1f       	adc	r21, r21
     352:	6a 95       	dec	r22
     354:	e2 f7       	brpl	.-8      	; 0x34e <DIO_vtogglePIN+0x56>
     356:	ba 01       	movw	r22, r20
     358:	62 27       	eor	r22, r18
     35a:	68 bb       	out	0x18, r22	; 24
     35c:	08 95       	ret
     35e:	25 b3       	in	r18, 0x15	; 21
     360:	81 e0       	ldi	r24, 0x01	; 1
     362:	90 e0       	ldi	r25, 0x00	; 0
     364:	ac 01       	movw	r20, r24
     366:	02 c0       	rjmp	.+4      	; 0x36c <DIO_vtogglePIN+0x74>
     368:	44 0f       	add	r20, r20
     36a:	55 1f       	adc	r21, r21
     36c:	6a 95       	dec	r22
     36e:	e2 f7       	brpl	.-8      	; 0x368 <DIO_vtogglePIN+0x70>
     370:	ba 01       	movw	r22, r20
     372:	62 27       	eor	r22, r18
     374:	65 bb       	out	0x15, r22	; 21
     376:	08 95       	ret
     378:	22 b3       	in	r18, 0x12	; 18
     37a:	81 e0       	ldi	r24, 0x01	; 1
     37c:	90 e0       	ldi	r25, 0x00	; 0
     37e:	ac 01       	movw	r20, r24
     380:	02 c0       	rjmp	.+4      	; 0x386 <DIO_vtogglePIN+0x8e>
     382:	44 0f       	add	r20, r20
     384:	55 1f       	adc	r21, r21
     386:	6a 95       	dec	r22
     388:	e2 f7       	brpl	.-8      	; 0x382 <DIO_vtogglePIN+0x8a>
     38a:	ba 01       	movw	r22, r20
     38c:	62 27       	eor	r22, r18
     38e:	62 bb       	out	0x12, r22	; 18
     390:	08 95       	ret

00000392 <DIO_readPIN>:
     392:	84 34       	cpi	r24, 0x44	; 68
     394:	09 f4       	brne	.+2      	; 0x398 <DIO_readPIN+0x6>
     396:	51 c0       	rjmp	.+162    	; 0x43a <DIO_readPIN+0xa8>
     398:	85 34       	cpi	r24, 0x45	; 69
     39a:	40 f4       	brcc	.+16     	; 0x3ac <DIO_readPIN+0x1a>
     39c:	82 34       	cpi	r24, 0x42	; 66
     39e:	39 f1       	breq	.+78     	; 0x3ee <DIO_readPIN+0x5c>
     3a0:	83 34       	cpi	r24, 0x43	; 67
     3a2:	c0 f5       	brcc	.+112    	; 0x414 <DIO_readPIN+0x82>
     3a4:	81 34       	cpi	r24, 0x41	; 65
     3a6:	09 f0       	breq	.+2      	; 0x3aa <DIO_readPIN+0x18>
     3a8:	5a c0       	rjmp	.+180    	; 0x45e <DIO_readPIN+0xcc>
     3aa:	0e c0       	rjmp	.+28     	; 0x3c8 <DIO_readPIN+0x36>
     3ac:	82 36       	cpi	r24, 0x62	; 98
     3ae:	f9 f0       	breq	.+62     	; 0x3ee <DIO_readPIN+0x5c>
     3b0:	83 36       	cpi	r24, 0x63	; 99
     3b2:	20 f4       	brcc	.+8      	; 0x3bc <DIO_readPIN+0x2a>
     3b4:	81 36       	cpi	r24, 0x61	; 97
     3b6:	09 f0       	breq	.+2      	; 0x3ba <DIO_readPIN+0x28>
     3b8:	52 c0       	rjmp	.+164    	; 0x45e <DIO_readPIN+0xcc>
     3ba:	06 c0       	rjmp	.+12     	; 0x3c8 <DIO_readPIN+0x36>
     3bc:	83 36       	cpi	r24, 0x63	; 99
     3be:	51 f1       	breq	.+84     	; 0x414 <DIO_readPIN+0x82>
     3c0:	84 36       	cpi	r24, 0x64	; 100
     3c2:	09 f0       	breq	.+2      	; 0x3c6 <DIO_readPIN+0x34>
     3c4:	4c c0       	rjmp	.+152    	; 0x45e <DIO_readPIN+0xcc>
     3c6:	39 c0       	rjmp	.+114    	; 0x43a <DIO_readPIN+0xa8>
     3c8:	29 b3       	in	r18, 0x19	; 25
     3ca:	81 e0       	ldi	r24, 0x01	; 1
     3cc:	90 e0       	ldi	r25, 0x00	; 0
     3ce:	06 2e       	mov	r0, r22
     3d0:	02 c0       	rjmp	.+4      	; 0x3d6 <DIO_readPIN+0x44>
     3d2:	88 0f       	add	r24, r24
     3d4:	99 1f       	adc	r25, r25
     3d6:	0a 94       	dec	r0
     3d8:	e2 f7       	brpl	.-8      	; 0x3d2 <DIO_readPIN+0x40>
     3da:	30 e0       	ldi	r19, 0x00	; 0
     3dc:	82 23       	and	r24, r18
     3de:	93 23       	and	r25, r19
     3e0:	02 c0       	rjmp	.+4      	; 0x3e6 <DIO_readPIN+0x54>
     3e2:	95 95       	asr	r25
     3e4:	87 95       	ror	r24
     3e6:	6a 95       	dec	r22
     3e8:	e2 f7       	brpl	.-8      	; 0x3e2 <DIO_readPIN+0x50>
     3ea:	98 2f       	mov	r25, r24
     3ec:	38 c0       	rjmp	.+112    	; 0x45e <DIO_readPIN+0xcc>
     3ee:	26 b3       	in	r18, 0x16	; 22
     3f0:	81 e0       	ldi	r24, 0x01	; 1
     3f2:	90 e0       	ldi	r25, 0x00	; 0
     3f4:	06 2e       	mov	r0, r22
     3f6:	02 c0       	rjmp	.+4      	; 0x3fc <DIO_readPIN+0x6a>
     3f8:	88 0f       	add	r24, r24
     3fa:	99 1f       	adc	r25, r25
     3fc:	0a 94       	dec	r0
     3fe:	e2 f7       	brpl	.-8      	; 0x3f8 <DIO_readPIN+0x66>
     400:	30 e0       	ldi	r19, 0x00	; 0
     402:	82 23       	and	r24, r18
     404:	93 23       	and	r25, r19
     406:	02 c0       	rjmp	.+4      	; 0x40c <DIO_readPIN+0x7a>
     408:	95 95       	asr	r25
     40a:	87 95       	ror	r24
     40c:	6a 95       	dec	r22
     40e:	e2 f7       	brpl	.-8      	; 0x408 <DIO_readPIN+0x76>
     410:	98 2f       	mov	r25, r24
     412:	25 c0       	rjmp	.+74     	; 0x45e <DIO_readPIN+0xcc>
     414:	23 b3       	in	r18, 0x13	; 19
     416:	81 e0       	ldi	r24, 0x01	; 1
     418:	90 e0       	ldi	r25, 0x00	; 0
     41a:	06 2e       	mov	r0, r22
     41c:	02 c0       	rjmp	.+4      	; 0x422 <DIO_readPIN+0x90>
     41e:	88 0f       	add	r24, r24
     420:	99 1f       	adc	r25, r25
     422:	0a 94       	dec	r0
     424:	e2 f7       	brpl	.-8      	; 0x41e <DIO_readPIN+0x8c>
     426:	30 e0       	ldi	r19, 0x00	; 0
     428:	82 23       	and	r24, r18
     42a:	93 23       	and	r25, r19
     42c:	02 c0       	rjmp	.+4      	; 0x432 <DIO_readPIN+0xa0>
     42e:	95 95       	asr	r25
     430:	87 95       	ror	r24
     432:	6a 95       	dec	r22
     434:	e2 f7       	brpl	.-8      	; 0x42e <DIO_readPIN+0x9c>
     436:	98 2f       	mov	r25, r24
     438:	12 c0       	rjmp	.+36     	; 0x45e <DIO_readPIN+0xcc>
     43a:	20 b3       	in	r18, 0x10	; 16
     43c:	81 e0       	ldi	r24, 0x01	; 1
     43e:	90 e0       	ldi	r25, 0x00	; 0
     440:	06 2e       	mov	r0, r22
     442:	02 c0       	rjmp	.+4      	; 0x448 <DIO_readPIN+0xb6>
     444:	88 0f       	add	r24, r24
     446:	99 1f       	adc	r25, r25
     448:	0a 94       	dec	r0
     44a:	e2 f7       	brpl	.-8      	; 0x444 <DIO_readPIN+0xb2>
     44c:	30 e0       	ldi	r19, 0x00	; 0
     44e:	82 23       	and	r24, r18
     450:	93 23       	and	r25, r19
     452:	02 c0       	rjmp	.+4      	; 0x458 <DIO_readPIN+0xc6>
     454:	95 95       	asr	r25
     456:	87 95       	ror	r24
     458:	6a 95       	dec	r22
     45a:	e2 f7       	brpl	.-8      	; 0x454 <DIO_readPIN+0xc2>
     45c:	98 2f       	mov	r25, r24
     45e:	89 2f       	mov	r24, r25
     460:	08 95       	ret

00000462 <DIO_vsetPORTDIR>:
     462:	84 34       	cpi	r24, 0x44	; 68
     464:	d9 f0       	breq	.+54     	; 0x49c <DIO_vsetPORTDIR+0x3a>
     466:	85 34       	cpi	r24, 0x45	; 69
     468:	38 f4       	brcc	.+14     	; 0x478 <DIO_vsetPORTDIR+0x16>
     46a:	82 34       	cpi	r24, 0x42	; 66
     46c:	99 f0       	breq	.+38     	; 0x494 <DIO_vsetPORTDIR+0x32>
     46e:	83 34       	cpi	r24, 0x43	; 67
     470:	98 f4       	brcc	.+38     	; 0x498 <DIO_vsetPORTDIR+0x36>
     472:	81 34       	cpi	r24, 0x41	; 65
     474:	a1 f4       	brne	.+40     	; 0x49e <DIO_vsetPORTDIR+0x3c>
     476:	0c c0       	rjmp	.+24     	; 0x490 <DIO_vsetPORTDIR+0x2e>
     478:	82 36       	cpi	r24, 0x62	; 98
     47a:	61 f0       	breq	.+24     	; 0x494 <DIO_vsetPORTDIR+0x32>
     47c:	83 36       	cpi	r24, 0x63	; 99
     47e:	18 f4       	brcc	.+6      	; 0x486 <DIO_vsetPORTDIR+0x24>
     480:	81 36       	cpi	r24, 0x61	; 97
     482:	69 f4       	brne	.+26     	; 0x49e <DIO_vsetPORTDIR+0x3c>
     484:	05 c0       	rjmp	.+10     	; 0x490 <DIO_vsetPORTDIR+0x2e>
     486:	83 36       	cpi	r24, 0x63	; 99
     488:	39 f0       	breq	.+14     	; 0x498 <DIO_vsetPORTDIR+0x36>
     48a:	84 36       	cpi	r24, 0x64	; 100
     48c:	41 f4       	brne	.+16     	; 0x49e <DIO_vsetPORTDIR+0x3c>
     48e:	06 c0       	rjmp	.+12     	; 0x49c <DIO_vsetPORTDIR+0x3a>
     490:	6a bb       	out	0x1a, r22	; 26
     492:	08 95       	ret
     494:	67 bb       	out	0x17, r22	; 23
     496:	08 95       	ret
     498:	64 bb       	out	0x14, r22	; 20
     49a:	08 95       	ret
     49c:	61 bb       	out	0x11, r22	; 17
     49e:	08 95       	ret

000004a0 <DIO_vwritePORT>:
     4a0:	84 34       	cpi	r24, 0x44	; 68
     4a2:	b1 f0       	breq	.+44     	; 0x4d0 <DIO_vwritePORT+0x30>
     4a4:	85 34       	cpi	r24, 0x45	; 69
     4a6:	38 f4       	brcc	.+14     	; 0x4b6 <DIO_vwritePORT+0x16>
     4a8:	82 34       	cpi	r24, 0x42	; 66
     4aa:	71 f0       	breq	.+28     	; 0x4c8 <DIO_vwritePORT+0x28>
     4ac:	83 34       	cpi	r24, 0x43	; 67
     4ae:	70 f4       	brcc	.+28     	; 0x4cc <DIO_vwritePORT+0x2c>
     4b0:	81 34       	cpi	r24, 0x41	; 65
     4b2:	79 f4       	brne	.+30     	; 0x4d2 <DIO_vwritePORT+0x32>
     4b4:	07 c0       	rjmp	.+14     	; 0x4c4 <DIO_vwritePORT+0x24>
     4b6:	83 36       	cpi	r24, 0x63	; 99
     4b8:	49 f0       	breq	.+18     	; 0x4cc <DIO_vwritePORT+0x2c>
     4ba:	84 36       	cpi	r24, 0x64	; 100
     4bc:	49 f0       	breq	.+18     	; 0x4d0 <DIO_vwritePORT+0x30>
     4be:	82 36       	cpi	r24, 0x62	; 98
     4c0:	41 f4       	brne	.+16     	; 0x4d2 <DIO_vwritePORT+0x32>
     4c2:	02 c0       	rjmp	.+4      	; 0x4c8 <DIO_vwritePORT+0x28>
     4c4:	6b bb       	out	0x1b, r22	; 27
     4c6:	08 95       	ret
     4c8:	68 bb       	out	0x18, r22	; 24
     4ca:	08 95       	ret
     4cc:	65 bb       	out	0x15, r22	; 21
     4ce:	08 95       	ret
     4d0:	62 bb       	out	0x12, r22	; 18
     4d2:	08 95       	ret

000004d4 <DIO_readPORT>:
     4d4:	84 34       	cpi	r24, 0x44	; 68
     4d6:	d9 f0       	breq	.+54     	; 0x50e <DIO_readPORT+0x3a>
     4d8:	85 34       	cpi	r24, 0x45	; 69
     4da:	38 f4       	brcc	.+14     	; 0x4ea <DIO_readPORT+0x16>
     4dc:	82 34       	cpi	r24, 0x42	; 66
     4de:	99 f0       	breq	.+38     	; 0x506 <DIO_readPORT+0x32>
     4e0:	83 34       	cpi	r24, 0x43	; 67
     4e2:	98 f4       	brcc	.+38     	; 0x50a <DIO_readPORT+0x36>
     4e4:	81 34       	cpi	r24, 0x41	; 65
     4e6:	a1 f4       	brne	.+40     	; 0x510 <DIO_readPORT+0x3c>
     4e8:	0c c0       	rjmp	.+24     	; 0x502 <DIO_readPORT+0x2e>
     4ea:	82 36       	cpi	r24, 0x62	; 98
     4ec:	61 f0       	breq	.+24     	; 0x506 <DIO_readPORT+0x32>
     4ee:	83 36       	cpi	r24, 0x63	; 99
     4f0:	18 f4       	brcc	.+6      	; 0x4f8 <DIO_readPORT+0x24>
     4f2:	81 36       	cpi	r24, 0x61	; 97
     4f4:	69 f4       	brne	.+26     	; 0x510 <DIO_readPORT+0x3c>
     4f6:	05 c0       	rjmp	.+10     	; 0x502 <DIO_readPORT+0x2e>
     4f8:	83 36       	cpi	r24, 0x63	; 99
     4fa:	39 f0       	breq	.+14     	; 0x50a <DIO_readPORT+0x36>
     4fc:	84 36       	cpi	r24, 0x64	; 100
     4fe:	41 f4       	brne	.+16     	; 0x510 <DIO_readPORT+0x3c>
     500:	06 c0       	rjmp	.+12     	; 0x50e <DIO_readPORT+0x3a>
     502:	99 b3       	in	r25, 0x19	; 25
     504:	05 c0       	rjmp	.+10     	; 0x510 <DIO_readPORT+0x3c>
     506:	96 b3       	in	r25, 0x16	; 22
     508:	03 c0       	rjmp	.+6      	; 0x510 <DIO_readPORT+0x3c>
     50a:	93 b3       	in	r25, 0x13	; 19
     50c:	01 c0       	rjmp	.+2      	; 0x510 <DIO_readPORT+0x3c>
     50e:	96 b3       	in	r25, 0x16	; 22
     510:	89 2f       	mov	r24, r25
     512:	08 95       	ret

00000514 <DIO_vtogglePORT>:
     514:	84 34       	cpi	r24, 0x44	; 68
     516:	09 f1       	breq	.+66     	; 0x55a <DIO_vtogglePORT+0x46>
     518:	85 34       	cpi	r24, 0x45	; 69
     51a:	38 f4       	brcc	.+14     	; 0x52a <DIO_vtogglePORT+0x16>
     51c:	82 34       	cpi	r24, 0x42	; 66
     51e:	a9 f0       	breq	.+42     	; 0x54a <DIO_vtogglePORT+0x36>
     520:	83 34       	cpi	r24, 0x43	; 67
     522:	b8 f4       	brcc	.+46     	; 0x552 <DIO_vtogglePORT+0x3e>
     524:	81 34       	cpi	r24, 0x41	; 65
     526:	e1 f4       	brne	.+56     	; 0x560 <DIO_vtogglePORT+0x4c>
     528:	0c c0       	rjmp	.+24     	; 0x542 <DIO_vtogglePORT+0x2e>
     52a:	82 36       	cpi	r24, 0x62	; 98
     52c:	71 f0       	breq	.+28     	; 0x54a <DIO_vtogglePORT+0x36>
     52e:	83 36       	cpi	r24, 0x63	; 99
     530:	18 f4       	brcc	.+6      	; 0x538 <DIO_vtogglePORT+0x24>
     532:	81 36       	cpi	r24, 0x61	; 97
     534:	a9 f4       	brne	.+42     	; 0x560 <DIO_vtogglePORT+0x4c>
     536:	05 c0       	rjmp	.+10     	; 0x542 <DIO_vtogglePORT+0x2e>
     538:	83 36       	cpi	r24, 0x63	; 99
     53a:	59 f0       	breq	.+22     	; 0x552 <DIO_vtogglePORT+0x3e>
     53c:	84 36       	cpi	r24, 0x64	; 100
     53e:	81 f4       	brne	.+32     	; 0x560 <DIO_vtogglePORT+0x4c>
     540:	0c c0       	rjmp	.+24     	; 0x55a <DIO_vtogglePORT+0x46>
     542:	8b b3       	in	r24, 0x1b	; 27
     544:	80 95       	com	r24
     546:	8b bb       	out	0x1b, r24	; 27
     548:	08 95       	ret
     54a:	88 b3       	in	r24, 0x18	; 24
     54c:	80 95       	com	r24
     54e:	88 bb       	out	0x18, r24	; 24
     550:	08 95       	ret
     552:	85 b3       	in	r24, 0x15	; 21
     554:	80 95       	com	r24
     556:	85 bb       	out	0x15, r24	; 21
     558:	08 95       	ret
     55a:	82 b3       	in	r24, 0x12	; 18
     55c:	80 95       	com	r24
     55e:	82 bb       	out	0x12, r24	; 18
     560:	08 95       	ret

00000562 <DIO_vconnectpullup>:
     562:	84 34       	cpi	r24, 0x44	; 68
     564:	09 f4       	brne	.+2      	; 0x568 <DIO_vconnectpullup+0x6>
     566:	71 c0       	rjmp	.+226    	; 0x64a <DIO_vconnectpullup+0xe8>
     568:	85 34       	cpi	r24, 0x45	; 69
     56a:	48 f4       	brcc	.+18     	; 0x57e <DIO_vconnectpullup+0x1c>
     56c:	82 34       	cpi	r24, 0x42	; 66
     56e:	99 f1       	breq	.+102    	; 0x5d6 <DIO_vconnectpullup+0x74>
     570:	83 34       	cpi	r24, 0x43	; 67
     572:	08 f0       	brcs	.+2      	; 0x576 <DIO_vconnectpullup+0x14>
     574:	4d c0       	rjmp	.+154    	; 0x610 <DIO_vconnectpullup+0xae>
     576:	81 34       	cpi	r24, 0x41	; 65
     578:	09 f0       	breq	.+2      	; 0x57c <DIO_vconnectpullup+0x1a>
     57a:	83 c0       	rjmp	.+262    	; 0x682 <DIO_vconnectpullup+0x120>
     57c:	0f c0       	rjmp	.+30     	; 0x59c <DIO_vconnectpullup+0x3a>
     57e:	82 36       	cpi	r24, 0x62	; 98
     580:	51 f1       	breq	.+84     	; 0x5d6 <DIO_vconnectpullup+0x74>
     582:	83 36       	cpi	r24, 0x63	; 99
     584:	20 f4       	brcc	.+8      	; 0x58e <DIO_vconnectpullup+0x2c>
     586:	81 36       	cpi	r24, 0x61	; 97
     588:	09 f0       	breq	.+2      	; 0x58c <DIO_vconnectpullup+0x2a>
     58a:	7b c0       	rjmp	.+246    	; 0x682 <DIO_vconnectpullup+0x120>
     58c:	07 c0       	rjmp	.+14     	; 0x59c <DIO_vconnectpullup+0x3a>
     58e:	83 36       	cpi	r24, 0x63	; 99
     590:	09 f4       	brne	.+2      	; 0x594 <DIO_vconnectpullup+0x32>
     592:	3e c0       	rjmp	.+124    	; 0x610 <DIO_vconnectpullup+0xae>
     594:	84 36       	cpi	r24, 0x64	; 100
     596:	09 f0       	breq	.+2      	; 0x59a <DIO_vconnectpullup+0x38>
     598:	74 c0       	rjmp	.+232    	; 0x682 <DIO_vconnectpullup+0x120>
     59a:	57 c0       	rjmp	.+174    	; 0x64a <DIO_vconnectpullup+0xe8>
     59c:	41 30       	cpi	r20, 0x01	; 1
     59e:	69 f4       	brne	.+26     	; 0x5ba <DIO_vconnectpullup+0x58>
     5a0:	2b b3       	in	r18, 0x1b	; 27
     5a2:	81 e0       	ldi	r24, 0x01	; 1
     5a4:	90 e0       	ldi	r25, 0x00	; 0
     5a6:	ac 01       	movw	r20, r24
     5a8:	02 c0       	rjmp	.+4      	; 0x5ae <DIO_vconnectpullup+0x4c>
     5aa:	44 0f       	add	r20, r20
     5ac:	55 1f       	adc	r21, r21
     5ae:	6a 95       	dec	r22
     5b0:	e2 f7       	brpl	.-8      	; 0x5aa <DIO_vconnectpullup+0x48>
     5b2:	ba 01       	movw	r22, r20
     5b4:	62 2b       	or	r22, r18
     5b6:	6b bb       	out	0x1b, r22	; 27
     5b8:	08 95       	ret
     5ba:	2b b3       	in	r18, 0x1b	; 27
     5bc:	81 e0       	ldi	r24, 0x01	; 1
     5be:	90 e0       	ldi	r25, 0x00	; 0
     5c0:	ac 01       	movw	r20, r24
     5c2:	02 c0       	rjmp	.+4      	; 0x5c8 <DIO_vconnectpullup+0x66>
     5c4:	44 0f       	add	r20, r20
     5c6:	55 1f       	adc	r21, r21
     5c8:	6a 95       	dec	r22
     5ca:	e2 f7       	brpl	.-8      	; 0x5c4 <DIO_vconnectpullup+0x62>
     5cc:	ba 01       	movw	r22, r20
     5ce:	60 95       	com	r22
     5d0:	62 23       	and	r22, r18
     5d2:	6b bb       	out	0x1b, r22	; 27
     5d4:	08 95       	ret
     5d6:	41 30       	cpi	r20, 0x01	; 1
     5d8:	69 f4       	brne	.+26     	; 0x5f4 <DIO_vconnectpullup+0x92>
     5da:	28 b3       	in	r18, 0x18	; 24
     5dc:	81 e0       	ldi	r24, 0x01	; 1
     5de:	90 e0       	ldi	r25, 0x00	; 0
     5e0:	ac 01       	movw	r20, r24
     5e2:	02 c0       	rjmp	.+4      	; 0x5e8 <DIO_vconnectpullup+0x86>
     5e4:	44 0f       	add	r20, r20
     5e6:	55 1f       	adc	r21, r21
     5e8:	6a 95       	dec	r22
     5ea:	e2 f7       	brpl	.-8      	; 0x5e4 <DIO_vconnectpullup+0x82>
     5ec:	ba 01       	movw	r22, r20
     5ee:	62 2b       	or	r22, r18
     5f0:	68 bb       	out	0x18, r22	; 24
     5f2:	08 95       	ret
     5f4:	28 b3       	in	r18, 0x18	; 24
     5f6:	81 e0       	ldi	r24, 0x01	; 1
     5f8:	90 e0       	ldi	r25, 0x00	; 0
     5fa:	ac 01       	movw	r20, r24
     5fc:	02 c0       	rjmp	.+4      	; 0x602 <DIO_vconnectpullup+0xa0>
     5fe:	44 0f       	add	r20, r20
     600:	55 1f       	adc	r21, r21
     602:	6a 95       	dec	r22
     604:	e2 f7       	brpl	.-8      	; 0x5fe <DIO_vconnectpullup+0x9c>
     606:	ba 01       	movw	r22, r20
     608:	60 95       	com	r22
     60a:	62 23       	and	r22, r18
     60c:	68 bb       	out	0x18, r22	; 24
     60e:	08 95       	ret
     610:	41 30       	cpi	r20, 0x01	; 1
     612:	69 f4       	brne	.+26     	; 0x62e <DIO_vconnectpullup+0xcc>
     614:	25 b3       	in	r18, 0x15	; 21
     616:	81 e0       	ldi	r24, 0x01	; 1
     618:	90 e0       	ldi	r25, 0x00	; 0
     61a:	ac 01       	movw	r20, r24
     61c:	02 c0       	rjmp	.+4      	; 0x622 <DIO_vconnectpullup+0xc0>
     61e:	44 0f       	add	r20, r20
     620:	55 1f       	adc	r21, r21
     622:	6a 95       	dec	r22
     624:	e2 f7       	brpl	.-8      	; 0x61e <DIO_vconnectpullup+0xbc>
     626:	ba 01       	movw	r22, r20
     628:	62 2b       	or	r22, r18
     62a:	65 bb       	out	0x15, r22	; 21
     62c:	08 95       	ret
     62e:	25 b3       	in	r18, 0x15	; 21
     630:	81 e0       	ldi	r24, 0x01	; 1
     632:	90 e0       	ldi	r25, 0x00	; 0
     634:	ac 01       	movw	r20, r24
     636:	02 c0       	rjmp	.+4      	; 0x63c <DIO_vconnectpullup+0xda>
     638:	44 0f       	add	r20, r20
     63a:	55 1f       	adc	r21, r21
     63c:	6a 95       	dec	r22
     63e:	e2 f7       	brpl	.-8      	; 0x638 <DIO_vconnectpullup+0xd6>
     640:	ba 01       	movw	r22, r20
     642:	60 95       	com	r22
     644:	62 23       	and	r22, r18
     646:	65 bb       	out	0x15, r22	; 21
     648:	08 95       	ret
     64a:	41 30       	cpi	r20, 0x01	; 1
     64c:	69 f4       	brne	.+26     	; 0x668 <DIO_vconnectpullup+0x106>
     64e:	22 b3       	in	r18, 0x12	; 18
     650:	81 e0       	ldi	r24, 0x01	; 1
     652:	90 e0       	ldi	r25, 0x00	; 0
     654:	ac 01       	movw	r20, r24
     656:	02 c0       	rjmp	.+4      	; 0x65c <DIO_vconnectpullup+0xfa>
     658:	44 0f       	add	r20, r20
     65a:	55 1f       	adc	r21, r21
     65c:	6a 95       	dec	r22
     65e:	e2 f7       	brpl	.-8      	; 0x658 <DIO_vconnectpullup+0xf6>
     660:	ba 01       	movw	r22, r20
     662:	62 2b       	or	r22, r18
     664:	62 bb       	out	0x12, r22	; 18
     666:	08 95       	ret
     668:	22 b3       	in	r18, 0x12	; 18
     66a:	81 e0       	ldi	r24, 0x01	; 1
     66c:	90 e0       	ldi	r25, 0x00	; 0
     66e:	ac 01       	movw	r20, r24
     670:	02 c0       	rjmp	.+4      	; 0x676 <DIO_vconnectpullup+0x114>
     672:	44 0f       	add	r20, r20
     674:	55 1f       	adc	r21, r21
     676:	6a 95       	dec	r22
     678:	e2 f7       	brpl	.-8      	; 0x672 <DIO_vconnectpullup+0x110>
     67a:	ba 01       	movw	r22, r20
     67c:	60 95       	com	r22
     67e:	62 23       	and	r22, r18
     680:	62 bb       	out	0x12, r22	; 18
     682:	08 95       	ret

00000684 <DIO_vwrite_low_nibble>:
     684:	6f 70       	andi	r22, 0x0F	; 15
     686:	84 34       	cpi	r24, 0x44	; 68
     688:	51 f1       	breq	.+84     	; 0x6de <DIO_vwrite_low_nibble+0x5a>
     68a:	85 34       	cpi	r24, 0x45	; 69
     68c:	38 f4       	brcc	.+14     	; 0x69c <DIO_vwrite_low_nibble+0x18>
     68e:	82 34       	cpi	r24, 0x42	; 66
     690:	c1 f0       	breq	.+48     	; 0x6c2 <DIO_vwrite_low_nibble+0x3e>
     692:	83 34       	cpi	r24, 0x43	; 67
     694:	e8 f4       	brcc	.+58     	; 0x6d0 <DIO_vwrite_low_nibble+0x4c>
     696:	81 34       	cpi	r24, 0x41	; 65
     698:	41 f5       	brne	.+80     	; 0x6ea <DIO_vwrite_low_nibble+0x66>
     69a:	0c c0       	rjmp	.+24     	; 0x6b4 <DIO_vwrite_low_nibble+0x30>
     69c:	82 36       	cpi	r24, 0x62	; 98
     69e:	89 f0       	breq	.+34     	; 0x6c2 <DIO_vwrite_low_nibble+0x3e>
     6a0:	83 36       	cpi	r24, 0x63	; 99
     6a2:	18 f4       	brcc	.+6      	; 0x6aa <DIO_vwrite_low_nibble+0x26>
     6a4:	81 36       	cpi	r24, 0x61	; 97
     6a6:	09 f5       	brne	.+66     	; 0x6ea <DIO_vwrite_low_nibble+0x66>
     6a8:	05 c0       	rjmp	.+10     	; 0x6b4 <DIO_vwrite_low_nibble+0x30>
     6aa:	83 36       	cpi	r24, 0x63	; 99
     6ac:	89 f0       	breq	.+34     	; 0x6d0 <DIO_vwrite_low_nibble+0x4c>
     6ae:	84 36       	cpi	r24, 0x64	; 100
     6b0:	e1 f4       	brne	.+56     	; 0x6ea <DIO_vwrite_low_nibble+0x66>
     6b2:	15 c0       	rjmp	.+42     	; 0x6de <DIO_vwrite_low_nibble+0x5a>
     6b4:	8b b3       	in	r24, 0x1b	; 27
     6b6:	80 7f       	andi	r24, 0xF0	; 240
     6b8:	8b bb       	out	0x1b, r24	; 27
     6ba:	8b b3       	in	r24, 0x1b	; 27
     6bc:	68 2b       	or	r22, r24
     6be:	6b bb       	out	0x1b, r22	; 27
     6c0:	08 95       	ret
     6c2:	88 b3       	in	r24, 0x18	; 24
     6c4:	80 7f       	andi	r24, 0xF0	; 240
     6c6:	88 bb       	out	0x18, r24	; 24
     6c8:	88 b3       	in	r24, 0x18	; 24
     6ca:	68 2b       	or	r22, r24
     6cc:	68 bb       	out	0x18, r22	; 24
     6ce:	08 95       	ret
     6d0:	85 b3       	in	r24, 0x15	; 21
     6d2:	80 7f       	andi	r24, 0xF0	; 240
     6d4:	85 bb       	out	0x15, r24	; 21
     6d6:	85 b3       	in	r24, 0x15	; 21
     6d8:	68 2b       	or	r22, r24
     6da:	65 bb       	out	0x15, r22	; 21
     6dc:	08 95       	ret
     6de:	82 b3       	in	r24, 0x12	; 18
     6e0:	80 7f       	andi	r24, 0xF0	; 240
     6e2:	82 bb       	out	0x12, r24	; 18
     6e4:	82 b3       	in	r24, 0x12	; 18
     6e6:	68 2b       	or	r22, r24
     6e8:	62 bb       	out	0x12, r22	; 18
     6ea:	08 95       	ret

000006ec <DIO_vwrite_high_nibble>:
     6ec:	62 95       	swap	r22
     6ee:	60 7f       	andi	r22, 0xF0	; 240
     6f0:	84 34       	cpi	r24, 0x44	; 68
     6f2:	51 f1       	breq	.+84     	; 0x748 <DIO_vwrite_high_nibble+0x5c>
     6f4:	85 34       	cpi	r24, 0x45	; 69
     6f6:	38 f4       	brcc	.+14     	; 0x706 <DIO_vwrite_high_nibble+0x1a>
     6f8:	82 34       	cpi	r24, 0x42	; 66
     6fa:	c1 f0       	breq	.+48     	; 0x72c <DIO_vwrite_high_nibble+0x40>
     6fc:	83 34       	cpi	r24, 0x43	; 67
     6fe:	e8 f4       	brcc	.+58     	; 0x73a <DIO_vwrite_high_nibble+0x4e>
     700:	81 34       	cpi	r24, 0x41	; 65
     702:	41 f5       	brne	.+80     	; 0x754 <DIO_vwrite_high_nibble+0x68>
     704:	0c c0       	rjmp	.+24     	; 0x71e <DIO_vwrite_high_nibble+0x32>
     706:	82 36       	cpi	r24, 0x62	; 98
     708:	89 f0       	breq	.+34     	; 0x72c <DIO_vwrite_high_nibble+0x40>
     70a:	83 36       	cpi	r24, 0x63	; 99
     70c:	18 f4       	brcc	.+6      	; 0x714 <DIO_vwrite_high_nibble+0x28>
     70e:	81 36       	cpi	r24, 0x61	; 97
     710:	09 f5       	brne	.+66     	; 0x754 <DIO_vwrite_high_nibble+0x68>
     712:	05 c0       	rjmp	.+10     	; 0x71e <DIO_vwrite_high_nibble+0x32>
     714:	83 36       	cpi	r24, 0x63	; 99
     716:	89 f0       	breq	.+34     	; 0x73a <DIO_vwrite_high_nibble+0x4e>
     718:	84 36       	cpi	r24, 0x64	; 100
     71a:	e1 f4       	brne	.+56     	; 0x754 <DIO_vwrite_high_nibble+0x68>
     71c:	15 c0       	rjmp	.+42     	; 0x748 <DIO_vwrite_high_nibble+0x5c>
     71e:	8b b3       	in	r24, 0x1b	; 27
     720:	8f 70       	andi	r24, 0x0F	; 15
     722:	8b bb       	out	0x1b, r24	; 27
     724:	8b b3       	in	r24, 0x1b	; 27
     726:	68 2b       	or	r22, r24
     728:	6b bb       	out	0x1b, r22	; 27
     72a:	08 95       	ret
     72c:	88 b3       	in	r24, 0x18	; 24
     72e:	8f 70       	andi	r24, 0x0F	; 15
     730:	88 bb       	out	0x18, r24	; 24
     732:	88 b3       	in	r24, 0x18	; 24
     734:	68 2b       	or	r22, r24
     736:	68 bb       	out	0x18, r22	; 24
     738:	08 95       	ret
     73a:	85 b3       	in	r24, 0x15	; 21
     73c:	8f 70       	andi	r24, 0x0F	; 15
     73e:	85 bb       	out	0x15, r24	; 21
     740:	85 b3       	in	r24, 0x15	; 21
     742:	68 2b       	or	r22, r24
     744:	65 bb       	out	0x15, r22	; 21
     746:	08 95       	ret
     748:	82 b3       	in	r24, 0x12	; 18
     74a:	8f 70       	andi	r24, 0x0F	; 15
     74c:	82 bb       	out	0x12, r24	; 18
     74e:	82 b3       	in	r24, 0x12	; 18
     750:	68 2b       	or	r22, r24
     752:	62 bb       	out	0x12, r22	; 18
     754:	08 95       	ret

00000756 <main>:
#include "UART.h"
#include "Garage_configuration.h"
volatile unsigned int counter; // for timer 2 overflow ISR
int main(void)
{
	MCUCSR |=1<<JTD;
     756:	84 b7       	in	r24, 0x34	; 52
     758:	80 68       	ori	r24, 0x80	; 128
     75a:	84 bf       	out	0x34, r24	; 52
	MCUCSR |=1<<JTD;
     75c:	84 b7       	in	r24, 0x34	; 52
     75e:	80 68       	ori	r24, 0x80	; 128
     760:	84 bf       	out	0x34, r24	; 52
	UART_vinit(9600);
     762:	60 e8       	ldi	r22, 0x80	; 128
     764:	75 e2       	ldi	r23, 0x25	; 37
     766:	80 e0       	ldi	r24, 0x00	; 0
     768:	90 e0       	ldi	r25, 0x00	; 0
     76a:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <UART_vinit>
	unsigned char x; // To read received data from UDR register
	led_vinit('D',7); //Gate indicator
     76e:	84 e4       	ldi	r24, 0x44	; 68
     770:	67 e0       	ldi	r22, 0x07	; 7
     772:	0e 94 e6 06 	call	0xdcc	; 0xdcc <led_vinit>
	DIO_vsetPINDir('A',1,1); // BUZZER for fire alarms
     776:	81 e4       	ldi	r24, 0x41	; 65
     778:	61 e0       	ldi	r22, 0x01	; 1
     77a:	41 e0       	ldi	r20, 0x01	; 1
     77c:	0e 94 5a 00 	call	0xb4	; 0xb4 <DIO_vsetPINDir>
	DIO_vsetPINDir('D',4,0); // Entrance gate
     780:	84 e4       	ldi	r24, 0x44	; 68
     782:	64 e0       	ldi	r22, 0x04	; 4
     784:	40 e0       	ldi	r20, 0x00	; 0
     786:	0e 94 5a 00 	call	0xb4	; 0xb4 <DIO_vsetPINDir>
	DIO_vsetPINDir('D',6,0);// Exit gate
     78a:	84 e4       	ldi	r24, 0x44	; 68
     78c:	66 e0       	ldi	r22, 0x06	; 6
     78e:	40 e0       	ldi	r20, 0x00	; 0
     790:	0e 94 5a 00 	call	0xb4	; 0xb4 <DIO_vsetPINDir>
	DIO_vsetPINDir('C',2,0); // PL_1
     794:	83 e4       	ldi	r24, 0x43	; 67
     796:	62 e0       	ldi	r22, 0x02	; 2
     798:	40 e0       	ldi	r20, 0x00	; 0
     79a:	0e 94 5a 00 	call	0xb4	; 0xb4 <DIO_vsetPINDir>
	DIO_vsetPINDir('C',4,0); //PL_2
     79e:	83 e4       	ldi	r24, 0x43	; 67
     7a0:	64 e0       	ldi	r22, 0x04	; 4
     7a2:	40 e0       	ldi	r20, 0x00	; 0
     7a4:	0e 94 5a 00 	call	0xb4	; 0xb4 <DIO_vsetPINDir>
	unsigned char Entering_car = 0;
	unsigned char latest_slot_update = 0;
	unsigned char gate_closing=0;
	unsigned char flagIN = 0; // Flag raised when a car exits the garage
	unsigned char flagOUT = 0; // Flag raised when a car enters the garage
	UltraSOnic_vinit('D',3);
     7a8:	84 e4       	ldi	r24, 0x44	; 68
     7aa:	63 e0       	ldi	r22, 0x03	; 3
     7ac:	0e 94 08 07 	call	0xe10	; 0xe10 <UltraSOnic_vinit>
	ADC_vinit(); //
     7b0:	0e 94 49 00 	call	0x92	; 0x92 <ADC_vinit>
	// Servo motor is already connected to PORT D, PIN 5 the OC1A (output capture pin for timer 1 )
	lcd_vinit();
     7b4:	0e 94 31 06 	call	0xc62	; 0xc62 <lcd_vinit>
	lcd_vsend_string("MEASUREMENTS");
     7b8:	80 e6       	ldi	r24, 0x60	; 96
     7ba:	90 e0       	ldi	r25, 0x00	; 0
     7bc:	0e 94 b2 06 	call	0xd64	; 0xd64 <lcd_vsend_string>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     7c0:	8f ef       	ldi	r24, 0xFF	; 255
     7c2:	9d e3       	ldi	r25, 0x3D	; 61
     7c4:	a9 e4       	ldi	r26, 0x49	; 73
     7c6:	81 50       	subi	r24, 0x01	; 1
     7c8:	90 40       	sbci	r25, 0x00	; 0
     7ca:	a0 40       	sbci	r26, 0x00	; 0
     7cc:	e1 f7       	brne	.-8      	; 0x7c6 <main+0x70>
     7ce:	00 c0       	rjmp	.+0      	; 0x7d0 <main+0x7a>
     7d0:	00 00       	nop
	_delay_ms(3000);
	led_vturnOn('D',7);
     7d2:	84 e4       	ldi	r24, 0x44	; 68
     7d4:	67 e0       	ldi	r22, 0x07	; 7
     7d6:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <led_vturnOn>
	for(shaft_pos=0;shaft_pos<=90;shaft_pos++)
     7da:	c0 e0       	ldi	r28, 0x00	; 0
     7dc:	d0 e0       	ldi	r29, 0x00	; 0
	{
		Servo_move_degree(shaft_pos);
     7de:	be 01       	movw	r22, r28
     7e0:	88 27       	eor	r24, r24
     7e2:	77 fd       	sbrc	r23, 7
     7e4:	80 95       	com	r24
     7e6:	98 2f       	mov	r25, r24
     7e8:	0e 94 ca 08 	call	0x1194	; 0x1194 <__floatsisf>
     7ec:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <Servo_move_degree>
     7f0:	af e0       	ldi	r26, 0x0F	; 15
     7f2:	b7 e2       	ldi	r27, 0x27	; 39
     7f4:	11 97       	sbiw	r26, 0x01	; 1
     7f6:	f1 f7       	brne	.-4      	; 0x7f4 <main+0x9e>
     7f8:	00 c0       	rjmp	.+0      	; 0x7fa <main+0xa4>
     7fa:	00 00       	nop
	// Servo motor is already connected to PORT D, PIN 5 the OC1A (output capture pin for timer 1 )
	lcd_vinit();
	lcd_vsend_string("MEASUREMENTS");
	_delay_ms(3000);
	led_vturnOn('D',7);
	for(shaft_pos=0;shaft_pos<=90;shaft_pos++)
     7fc:	21 96       	adiw	r28, 0x01	; 1
     7fe:	cb 35       	cpi	r28, 0x5B	; 91
     800:	d1 05       	cpc	r29, r1
     802:	69 f7       	brne	.-38     	; 0x7de <main+0x88>
	{
		Servo_move_degree(shaft_pos);
		 _delay_ms(5);
	}
	led_vturnOff('D',7);		 
     804:	84 e4       	ldi	r24, 0x44	; 68
     806:	67 e0       	ldi	r22, 0x07	; 7
     808:	0e 94 ee 06 	call	0xddc	; 0xddc <led_vturnOff>
	for(shaft_pos=90;shaft_pos>=0;shaft_pos--)
     80c:	ca e5       	ldi	r28, 0x5A	; 90
     80e:	d0 e0       	ldi	r29, 0x00	; 0
	{
		Servo_move_degree(shaft_pos);
     810:	be 01       	movw	r22, r28
     812:	88 27       	eor	r24, r24
     814:	77 fd       	sbrc	r23, 7
     816:	80 95       	com	r24
     818:	98 2f       	mov	r25, r24
     81a:	0e 94 ca 08 	call	0x1194	; 0x1194 <__floatsisf>
     81e:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <Servo_move_degree>
     822:	8f e0       	ldi	r24, 0x0F	; 15
     824:	97 e2       	ldi	r25, 0x27	; 39
     826:	01 97       	sbiw	r24, 0x01	; 1
     828:	f1 f7       	brne	.-4      	; 0x826 <main+0xd0>
     82a:	00 c0       	rjmp	.+0      	; 0x82c <main+0xd6>
     82c:	00 00       	nop
	{
		Servo_move_degree(shaft_pos);
		 _delay_ms(5);
	}
	led_vturnOff('D',7);		 
	for(shaft_pos=90;shaft_pos>=0;shaft_pos--)
     82e:	21 97       	sbiw	r28, 0x01	; 1
     830:	9f ef       	ldi	r25, 0xFF	; 255
     832:	cf 3f       	cpi	r28, 0xFF	; 255
     834:	d9 07       	cpc	r29, r25
     836:	61 f7       	brne	.-40     	; 0x810 <main+0xba>
	{
		Servo_move_degree(shaft_pos);
		_delay_ms(5);
	}
	lcd_CLRscreen();
     838:	0e 94 c1 06 	call	0xd82	; 0xd82 <lcd_CLRscreen>
	timer2_overflow_mode();
     83c:	0e 94 bc 07 	call	0xf78	; 0xf78 <timer2_overflow_mode>
	unsigned char Free_slots = 3;
	unsigned char Entering_car = 0;
	unsigned char latest_slot_update = 0;
	unsigned char gate_closing=0;
	unsigned char flagIN = 0; // Flag raised when a car exits the garage
	unsigned char flagOUT = 0; // Flag raised when a car enters the garage
     840:	55 24       	eor	r5, r5
	unsigned char ParkingCounter_PL3 = 0;
	unsigned char Free_slots = 3;
	unsigned char Entering_car = 0;
	unsigned char latest_slot_update = 0;
	unsigned char gate_closing=0;
	unsigned char flagIN = 0; // Flag raised when a car exits the garage
     842:	44 24       	eor	r4, r4
	unsigned char ParkingCounter_PL1 = 0;
	unsigned char ParkingCounter_PL2 = 0;
	unsigned char ParkingCounter_PL3 = 0;
	unsigned char Free_slots = 3;
	unsigned char Entering_car = 0;
	unsigned char latest_slot_update = 0;
     844:	33 24       	eor	r3, r3
	int shaft_pos;
	unsigned char ParkingCounter_PL1 = 0;
	unsigned char ParkingCounter_PL2 = 0;
	unsigned char ParkingCounter_PL3 = 0;
	unsigned char Free_slots = 3;
	unsigned char Entering_car = 0;
     846:	aa 24       	eor	r10, r10
			distance_PL2 = DIO_readPIN('C',4);
		   if(temperature >= 60)
		   {
				DIO_vwritePIN('A',1,1); // Turn on buzzer
				led_vturnOn('D',7);
				for(shaft_pos=0;shaft_pos<=90;shaft_pos++)
     848:	88 24       	eor	r8, r8
     84a:	99 24       	eor	r9, r9
					
					Servo_move_degree(shaft_pos);
					_delay_ms(5);
				}   
				lcd_CLRscreen();
				lcd_vsend_string("Fire Alarm !");
     84c:	0f 2e       	mov	r0, r31
     84e:	fd e6       	ldi	r31, 0x6D	; 109
     850:	6f 2e       	mov	r6, r31
     852:	f0 e0       	ldi	r31, 0x00	; 0
     854:	7f 2e       	mov	r7, r31
     856:	f0 2d       	mov	r31, r0
				   if(x == 'o')
				   {
					   flagIN = 1;
					   lcd_CLRscreen();
					   lcd_move_cursor(0,0);
					   lcd_vsend_string("Bye :)");
     858:	ca 2c       	mov	r12, r10
     85a:	f3 2c       	mov	r15, r3
	timer2_overflow_mode();
	
	
    while(1)
    {
			temperature=(ADC_u16read()*0.25);
     85c:	0e 94 4f 00 	call	0x9e	; 0x9e <ADC_u16read>
     860:	dc 01       	movw	r26, r24
     862:	bd 01       	movw	r22, r26
     864:	88 27       	eor	r24, r24
     866:	77 fd       	sbrc	r23, 7
     868:	80 95       	com	r24
     86a:	98 2f       	mov	r25, r24
     86c:	0e 94 ca 08 	call	0x1194	; 0x1194 <__floatsisf>
     870:	20 e0       	ldi	r18, 0x00	; 0
     872:	30 e0       	ldi	r19, 0x00	; 0
     874:	40 e8       	ldi	r20, 0x80	; 128
     876:	5e e3       	ldi	r21, 0x3E	; 62
     878:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <__mulsf3>
     87c:	0e 94 9c 08 	call	0x1138	; 0x1138 <__fixunssfsi>
     880:	dc 01       	movw	r26, r24
     882:	cb 01       	movw	r24, r22
     884:	5c 01       	movw	r10, r24
			distance_PL3 = UltraSOnic_vtrigger('D', 3);
     886:	84 e4       	ldi	r24, 0x44	; 68
     888:	63 e0       	ldi	r22, 0x03	; 3
     88a:	0e 94 13 07 	call	0xe26	; 0xe26 <UltraSOnic_vtrigger>
     88e:	8c 01       	movw	r16, r24
			distance_PL1 = DIO_readPIN('C',2);
     890:	83 e4       	ldi	r24, 0x43	; 67
     892:	62 e0       	ldi	r22, 0x02	; 2
     894:	0e 94 c9 01 	call	0x392	; 0x392 <DIO_readPIN>
     898:	d8 2e       	mov	r13, r24
			distance_PL2 = DIO_readPIN('C',4);
     89a:	83 e4       	ldi	r24, 0x43	; 67
     89c:	64 e0       	ldi	r22, 0x04	; 4
     89e:	0e 94 c9 01 	call	0x392	; 0x392 <DIO_readPIN>
     8a2:	e8 2e       	mov	r14, r24
		   if(temperature >= 60)
     8a4:	bc e3       	ldi	r27, 0x3C	; 60
     8a6:	ab 16       	cp	r10, r27
     8a8:	b1 04       	cpc	r11, r1
     8aa:	08 f4       	brcc	.+2      	; 0x8ae <__stack+0x4f>
     8ac:	67 c0       	rjmp	.+206    	; 0x97c <__stack+0x11d>
		   {
				DIO_vwritePIN('A',1,1); // Turn on buzzer
     8ae:	81 e4       	ldi	r24, 0x41	; 65
     8b0:	61 e0       	ldi	r22, 0x01	; 1
     8b2:	41 e0       	ldi	r20, 0x01	; 1
     8b4:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <DIO_vwritePIN>
				led_vturnOn('D',7);
     8b8:	84 e4       	ldi	r24, 0x44	; 68
     8ba:	67 e0       	ldi	r22, 0x07	; 7
     8bc:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <led_vturnOn>
				for(shaft_pos=0;shaft_pos<=90;shaft_pos++)
     8c0:	e4 01       	movw	r28, r8
				{
					
					Servo_move_degree(shaft_pos);
     8c2:	be 01       	movw	r22, r28
     8c4:	88 27       	eor	r24, r24
     8c6:	77 fd       	sbrc	r23, 7
     8c8:	80 95       	com	r24
     8ca:	98 2f       	mov	r25, r24
     8cc:	0e 94 ca 08 	call	0x1194	; 0x1194 <__floatsisf>
     8d0:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <Servo_move_degree>
     8d4:	8f e0       	ldi	r24, 0x0F	; 15
     8d6:	97 e2       	ldi	r25, 0x27	; 39
     8d8:	01 97       	sbiw	r24, 0x01	; 1
     8da:	f1 f7       	brne	.-4      	; 0x8d8 <__stack+0x79>
     8dc:	00 c0       	rjmp	.+0      	; 0x8de <__stack+0x7f>
     8de:	00 00       	nop
			distance_PL2 = DIO_readPIN('C',4);
		   if(temperature >= 60)
		   {
				DIO_vwritePIN('A',1,1); // Turn on buzzer
				led_vturnOn('D',7);
				for(shaft_pos=0;shaft_pos<=90;shaft_pos++)
     8e0:	21 96       	adiw	r28, 0x01	; 1
     8e2:	cb 35       	cpi	r28, 0x5B	; 91
     8e4:	d1 05       	cpc	r29, r1
     8e6:	69 f7       	brne	.-38     	; 0x8c2 <__stack+0x63>
				{
					
					Servo_move_degree(shaft_pos);
					_delay_ms(5);
				}   
				lcd_CLRscreen();
     8e8:	0e 94 c1 06 	call	0xd82	; 0xd82 <lcd_CLRscreen>
				lcd_vsend_string("Fire Alarm !");
     8ec:	c3 01       	movw	r24, r6
     8ee:	0e 94 b2 06 	call	0xd64	; 0xd64 <lcd_vsend_string>
				while(ADC_u16read()*0.25 >= 60);
     8f2:	0e 94 4f 00 	call	0x9e	; 0x9e <ADC_u16read>
     8f6:	dc 01       	movw	r26, r24
     8f8:	bd 01       	movw	r22, r26
     8fa:	88 27       	eor	r24, r24
     8fc:	77 fd       	sbrc	r23, 7
     8fe:	80 95       	com	r24
     900:	98 2f       	mov	r25, r24
     902:	0e 94 ca 08 	call	0x1194	; 0x1194 <__floatsisf>
     906:	20 e0       	ldi	r18, 0x00	; 0
     908:	30 e0       	ldi	r19, 0x00	; 0
     90a:	40 e8       	ldi	r20, 0x80	; 128
     90c:	5e e3       	ldi	r21, 0x3E	; 62
     90e:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <__mulsf3>
     912:	20 e0       	ldi	r18, 0x00	; 0
     914:	30 e0       	ldi	r19, 0x00	; 0
     916:	40 e7       	ldi	r20, 0x70	; 112
     918:	52 e4       	ldi	r21, 0x42	; 66
     91a:	0e 94 56 09 	call	0x12ac	; 0x12ac <__gesf2>
     91e:	88 23       	and	r24, r24
     920:	44 f7       	brge	.-48     	; 0x8f2 <__stack+0x93>
				DIO_vwritePIN('A',1,0); // Turn off buzzer
     922:	81 e4       	ldi	r24, 0x41	; 65
     924:	61 e0       	ldi	r22, 0x01	; 1
     926:	40 e0       	ldi	r20, 0x00	; 0
     928:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <DIO_vwritePIN>
				lcd_CLRscreen();
     92c:	0e 94 c1 06 	call	0xd82	; 0xd82 <lcd_CLRscreen>
				while (DIO_readPIN('D',4)==0 || DIO_readPIN('D',6)==0);
     930:	84 e4       	ldi	r24, 0x44	; 68
     932:	64 e0       	ldi	r22, 0x04	; 4
     934:	0e 94 c9 01 	call	0x392	; 0x392 <DIO_readPIN>
     938:	88 23       	and	r24, r24
     93a:	d1 f3       	breq	.-12     	; 0x930 <__stack+0xd1>
     93c:	84 e4       	ldi	r24, 0x44	; 68
     93e:	66 e0       	ldi	r22, 0x06	; 6
     940:	0e 94 c9 01 	call	0x392	; 0x392 <DIO_readPIN>
     944:	88 23       	and	r24, r24
     946:	a1 f3       	breq	.-24     	; 0x930 <__stack+0xd1>
				led_vturnOff('D',7);
     948:	84 e4       	ldi	r24, 0x44	; 68
     94a:	67 e0       	ldi	r22, 0x07	; 7
     94c:	0e 94 ee 06 	call	0xddc	; 0xddc <led_vturnOff>
					for(shaft_pos=90;shaft_pos>=0;shaft_pos--)
     950:	ca e5       	ldi	r28, 0x5A	; 90
     952:	d0 e0       	ldi	r29, 0x00	; 0
					{
							
						Servo_move_degree(shaft_pos);
     954:	be 01       	movw	r22, r28
     956:	88 27       	eor	r24, r24
     958:	77 fd       	sbrc	r23, 7
     95a:	80 95       	com	r24
     95c:	98 2f       	mov	r25, r24
     95e:	0e 94 ca 08 	call	0x1194	; 0x1194 <__floatsisf>
     962:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <Servo_move_degree>
     966:	8f e0       	ldi	r24, 0x0F	; 15
     968:	97 e2       	ldi	r25, 0x27	; 39
     96a:	01 97       	sbiw	r24, 0x01	; 1
     96c:	f1 f7       	brne	.-4      	; 0x96a <__stack+0x10b>
     96e:	00 c0       	rjmp	.+0      	; 0x970 <__stack+0x111>
     970:	00 00       	nop
				while(ADC_u16read()*0.25 >= 60);
				DIO_vwritePIN('A',1,0); // Turn off buzzer
				lcd_CLRscreen();
				while (DIO_readPIN('D',4)==0 || DIO_readPIN('D',6)==0);
				led_vturnOff('D',7);
					for(shaft_pos=90;shaft_pos>=0;shaft_pos--)
     972:	21 97       	sbiw	r28, 0x01	; 1
     974:	9f ef       	ldi	r25, 0xFF	; 255
     976:	cf 3f       	cpi	r28, 0xFF	; 255
     978:	d9 07       	cpc	r29, r25
     97a:	61 f7       	brne	.-40     	; 0x954 <__stack+0xf5>
							
						Servo_move_degree(shaft_pos);
						_delay_ms(5);
					}					
		   }
		   if(distance_PL3 <=10 )
     97c:	0b 30       	cpi	r16, 0x0B	; 11
     97e:	11 05       	cpc	r17, r1
     980:	20 f4       	brcc	.+8      	; 0x98a <__stack+0x12b>
		   {
			   if(distance_PL3 != 1)
     982:	01 30       	cpi	r16, 0x01	; 1
     984:	11 05       	cpc	r17, r1
     986:	21 f4       	brne	.+8      	; 0x990 <__stack+0x131>
     988:	04 c0       	rjmp	.+8      	; 0x992 <__stack+0x133>
					ParkingCounter_PL3 = 0;
			   }				   			   
		   }
		   else
		   {
			   ParkingCounter_PL3 = 1;
     98a:	55 24       	eor	r5, r5
     98c:	53 94       	inc	r5
     98e:	01 c0       	rjmp	.+2      	; 0x992 <__stack+0x133>
		   }
		   if(distance_PL3 <=10 )
		   {
			   if(distance_PL3 != 1)
			   {
					ParkingCounter_PL3 = 0;
     990:	55 24       	eor	r5, r5
		   {
			   ParkingCounter_PL1 = 1;
		   }
		   if (!distance_PL2)
		   {
			   ParkingCounter_PL2 = 0;
     992:	c1 e0       	ldi	r28, 0x01	; 1
     994:	ee 20       	and	r14, r14
     996:	09 f4       	brne	.+2      	; 0x99a <__stack+0x13b>
     998:	c0 e0       	ldi	r28, 0x00	; 0
		   {
			   ParkingCounter_PL3 = 1;
		   }
		   if (!distance_PL1)
		   {
			   ParkingCounter_PL1 = 0;
     99a:	81 e0       	ldi	r24, 0x01	; 1
     99c:	dd 20       	and	r13, r13
     99e:	09 f4       	brne	.+2      	; 0x9a2 <__stack+0x143>
     9a0:	80 e0       	ldi	r24, 0x00	; 0
		   }
		   else
		   {
			   ParkingCounter_PL2 = 1;
		   }
		   Free_slots = ParkingCounter_PL1 + ParkingCounter_PL2 + ParkingCounter_PL3 - Entering_car;
     9a2:	c8 0f       	add	r28, r24
     9a4:	cc 19       	sub	r28, r12
     9a6:	c5 0d       	add	r28, r5
		  if(counter == 92 && Free_slots != latest_slot_update)
     9a8:	80 91 b2 00 	lds	r24, 0x00B2
     9ac:	90 91 b3 00 	lds	r25, 0x00B3
     9b0:	8c 35       	cpi	r24, 0x5C	; 92
     9b2:	91 05       	cpc	r25, r1
     9b4:	89 f5       	brne	.+98     	; 0xa18 <__stack+0x1b9>
     9b6:	cf 15       	cp	r28, r15
     9b8:	79 f1       	breq	.+94     	; 0xa18 <__stack+0x1b9>
		   {
			   Entering_car=0;
			   latest_slot_update = Free_slots;
			   lcd_CLRscreen();
     9ba:	0e 94 c1 06 	call	0xd82	; 0xd82 <lcd_CLRscreen>
			   lcd_move_cursor(0,0);
     9be:	80 e0       	ldi	r24, 0x00	; 0
     9c0:	60 e0       	ldi	r22, 0x00	; 0
     9c2:	0e 94 cb 06 	call	0xd96	; 0xd96 <lcd_move_cursor>
			   lcd_vsend_string("Free slots : ");
     9c6:	8a e7       	ldi	r24, 0x7A	; 122
     9c8:	90 e0       	ldi	r25, 0x00	; 0
     9ca:	0e 94 b2 06 	call	0xd64	; 0xd64 <lcd_vsend_string>
			   lcd_move_cursor(0,12);
     9ce:	80 e0       	ldi	r24, 0x00	; 0
     9d0:	6c e0       	ldi	r22, 0x0C	; 12
     9d2:	0e 94 cb 06 	call	0xd96	; 0xd96 <lcd_move_cursor>
     9d6:	dc 2f       	mov	r29, r28
     9d8:	c4 30       	cpi	r28, 0x04	; 4
     9da:	08 f0       	brcs	.+2      	; 0x9de <__stack+0x17f>
     9dc:	d3 e0       	ldi	r29, 0x03	; 3
			   }
			   else if (Free_slots<0)
			   {
				   Free_slots=0;
			   }
			   lcd_vsend_char(Free_slots+48);
     9de:	8d 2f       	mov	r24, r29
     9e0:	80 5d       	subi	r24, 0xD0	; 208
     9e2:	0e 94 90 06 	call	0xd20	; 0xd20 <lcd_vsend_char>
			   lcd_move_cursor(1,0);
     9e6:	81 e0       	ldi	r24, 0x01	; 1
     9e8:	60 e0       	ldi	r22, 0x00	; 0
     9ea:	0e 94 cb 06 	call	0xd96	; 0xd96 <lcd_move_cursor>
			   lcd_vsend_string("temp = ");
     9ee:	88 e8       	ldi	r24, 0x88	; 136
     9f0:	90 e0       	ldi	r25, 0x00	; 0
     9f2:	0e 94 b2 06 	call	0xd64	; 0xd64 <lcd_vsend_string>
			   lcd_vsend_char(temperature/10 +48);
     9f6:	c5 01       	movw	r24, r10
     9f8:	6a e0       	ldi	r22, 0x0A	; 10
     9fa:	70 e0       	ldi	r23, 0x00	; 0
     9fc:	0e 94 00 0a 	call	0x1400	; 0x1400 <__udivmodhi4>
     a00:	08 2f       	mov	r16, r24
     a02:	86 2f       	mov	r24, r22
     a04:	80 5d       	subi	r24, 0xD0	; 208
     a06:	0e 94 90 06 	call	0xd20	; 0xd20 <lcd_vsend_char>
			   lcd_vsend_char(temperature%10 +48);
     a0a:	80 2f       	mov	r24, r16
     a0c:	80 5d       	subi	r24, 0xD0	; 208
     a0e:	0e 94 90 06 	call	0xd20	; 0xd20 <lcd_vsend_char>
		   }
		   Free_slots = ParkingCounter_PL1 + ParkingCounter_PL2 + ParkingCounter_PL3 - Entering_car;
		  if(counter == 92 && Free_slots != latest_slot_update)
		   {
			   Entering_car=0;
			   latest_slot_update = Free_slots;
     a12:	fc 2e       	mov	r15, r28
			   }
			   lcd_vsend_char(Free_slots+48);
			   lcd_move_cursor(1,0);
			   lcd_vsend_string("temp = ");
			   lcd_vsend_char(temperature/10 +48);
			   lcd_vsend_char(temperature%10 +48);
     a14:	cd 2f       	mov	r28, r29
			   ParkingCounter_PL2 = 1;
		   }
		   Free_slots = ParkingCounter_PL1 + ParkingCounter_PL2 + ParkingCounter_PL3 - Entering_car;
		  if(counter == 92 && Free_slots != latest_slot_update)
		   {
			   Entering_car=0;
     a16:	cc 24       	eor	r12, r12
				   }
				   while(DIO_readPIN('D',4)); // Do nothing until the entrance sensor detects a car
			   }
		   }
		   #elif defined UART
		   if(DIO_readPIN('D',4)==0)
     a18:	84 e4       	ldi	r24, 0x44	; 68
     a1a:	64 e0       	ldi	r22, 0x04	; 4
     a1c:	0e 94 c9 01 	call	0x392	; 0x392 <DIO_readPIN>
     a20:	88 23       	and	r24, r24
     a22:	09 f0       	breq	.+2      	; 0xa26 <__stack+0x1c7>
     a24:	5e c0       	rjmp	.+188    	; 0xae2 <__stack+0x283>
		   {
			   //while(UART_u8receiveData()!= 'c' && UART_u8receiveData()!= 'o');
			   if(flagIN > 0)
     a26:	33 20       	and	r3, r3
     a28:	49 f1       	breq	.+82     	; 0xa7c <__stack+0x21d>
			   {
				   x = UART_u8receiveData();
     a2a:	0e 94 1b 08 	call	0x1036	; 0x1036 <UART_u8receiveData>
					if(x == 'c')
     a2e:	83 36       	cpi	r24, 0x63	; 99
     a30:	09 f0       	breq	.+2      	; 0xa34 <__stack+0x1d5>
     a32:	57 c0       	rjmp	.+174    	; 0xae2 <__stack+0x283>
					{
						latest_slot_update = Free_slots+1;
     a34:	fc 2e       	mov	r15, r28
     a36:	f3 94       	inc	r15
						led_vturnOff('D',7);
     a38:	84 e4       	ldi	r24, 0x44	; 68
     a3a:	67 e0       	ldi	r22, 0x07	; 7
     a3c:	0e 94 ee 06 	call	0xddc	; 0xddc <led_vturnOff>
						for(shaft_pos=90;shaft_pos>=0;shaft_pos-=1){
     a40:	ca e5       	ldi	r28, 0x5A	; 90
     a42:	d0 e0       	ldi	r29, 0x00	; 0
							Servo_move_degree(shaft_pos);
     a44:	be 01       	movw	r22, r28
     a46:	88 27       	eor	r24, r24
     a48:	77 fd       	sbrc	r23, 7
     a4a:	80 95       	com	r24
     a4c:	98 2f       	mov	r25, r24
     a4e:	0e 94 ca 08 	call	0x1194	; 0x1194 <__floatsisf>
     a52:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <Servo_move_degree>
     a56:	af e0       	ldi	r26, 0x0F	; 15
     a58:	b7 e2       	ldi	r27, 0x27	; 39
     a5a:	11 97       	sbiw	r26, 0x01	; 1
     a5c:	f1 f7       	brne	.-4      	; 0xa5a <__stack+0x1fb>
     a5e:	00 c0       	rjmp	.+0      	; 0xa60 <__stack+0x201>
     a60:	00 00       	nop
				   x = UART_u8receiveData();
					if(x == 'c')
					{
						latest_slot_update = Free_slots+1;
						led_vturnOff('D',7);
						for(shaft_pos=90;shaft_pos>=0;shaft_pos-=1){
     a62:	21 97       	sbiw	r28, 0x01	; 1
     a64:	bf ef       	ldi	r27, 0xFF	; 255
     a66:	cf 3f       	cpi	r28, 0xFF	; 255
     a68:	db 07       	cpc	r29, r27
     a6a:	61 f7       	brne	.-40     	; 0xa44 <__stack+0x1e5>
							Servo_move_degree(shaft_pos);
							_delay_ms(5);
						}
						flagIN = 0;
						while(DIO_readPIN('D',4)==0); // In case the car remains in front of the entrance sensor while leaving
     a6c:	84 e4       	ldi	r24, 0x44	; 68
     a6e:	64 e0       	ldi	r22, 0x04	; 4
     a70:	0e 94 c9 01 	call	0x392	; 0x392 <DIO_readPIN>
     a74:	88 23       	and	r24, r24
     a76:	d1 f3       	breq	.-12     	; 0xa6c <__stack+0x20d>
						led_vturnOff('D',7);
						for(shaft_pos=90;shaft_pos>=0;shaft_pos-=1){
							Servo_move_degree(shaft_pos);
							_delay_ms(5);
						}
						flagIN = 0;
     a78:	33 24       	eor	r3, r3
     a7a:	33 c0       	rjmp	.+102    	; 0xae2 <__stack+0x283>
						while(DIO_readPIN('D',4)==0); // In case the car remains in front of the entrance sensor while leaving
					}
			   }			   
			   else if(flagIN == 0 ) // A new car is entering
			   {
				   UART_vsendString("Welcome");
     a7c:	80 e9       	ldi	r24, 0x90	; 144
     a7e:	90 e0       	ldi	r25, 0x00	; 0
     a80:	0e 94 1f 08 	call	0x103e	; 0x103e <UART_vsendString>
				   x = UART_u8receiveData();
     a84:	0e 94 1b 08 	call	0x1036	; 0x1036 <UART_u8receiveData>
				   if(x== 'o')
     a88:	8f 36       	cpi	r24, 0x6F	; 111
     a8a:	59 f5       	brne	.+86     	; 0xae2 <__stack+0x283>
				   {
					   flagOUT = 1;
					   lcd_CLRscreen();
     a8c:	0e 94 c1 06 	call	0xd82	; 0xd82 <lcd_CLRscreen>
					   lcd_move_cursor(0,0);
     a90:	80 e0       	ldi	r24, 0x00	; 0
     a92:	60 e0       	ldi	r22, 0x00	; 0
     a94:	0e 94 cb 06 	call	0xd96	; 0xd96 <lcd_move_cursor>
					   lcd_vsend_string("Welcome :)");
     a98:	88 e9       	ldi	r24, 0x98	; 152
     a9a:	90 e0       	ldi	r25, 0x00	; 0
     a9c:	0e 94 b2 06 	call	0xd64	; 0xd64 <lcd_vsend_string>
					   Entering_car++; // In case two cars are entering back to back and there is only one free parking slot
     aa0:	c3 94       	inc	r12
					   led_vturnOn('D',7);
     aa2:	84 e4       	ldi	r24, 0x44	; 68
     aa4:	67 e0       	ldi	r22, 0x07	; 7
     aa6:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <led_vturnOn>
					   for(shaft_pos=0;shaft_pos<=90;shaft_pos+=1){
     aaa:	e4 01       	movw	r28, r8
						   Servo_move_degree(shaft_pos);
     aac:	be 01       	movw	r22, r28
     aae:	88 27       	eor	r24, r24
     ab0:	77 fd       	sbrc	r23, 7
     ab2:	80 95       	com	r24
     ab4:	98 2f       	mov	r25, r24
     ab6:	0e 94 ca 08 	call	0x1194	; 0x1194 <__floatsisf>
     aba:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <Servo_move_degree>
     abe:	8f e0       	ldi	r24, 0x0F	; 15
     ac0:	97 e2       	ldi	r25, 0x27	; 39
     ac2:	01 97       	sbiw	r24, 0x01	; 1
     ac4:	f1 f7       	brne	.-4      	; 0xac2 <__stack+0x263>
     ac6:	00 c0       	rjmp	.+0      	; 0xac8 <__stack+0x269>
     ac8:	00 00       	nop
					   lcd_CLRscreen();
					   lcd_move_cursor(0,0);
					   lcd_vsend_string("Welcome :)");
					   Entering_car++; // In case two cars are entering back to back and there is only one free parking slot
					   led_vturnOn('D',7);
					   for(shaft_pos=0;shaft_pos<=90;shaft_pos+=1){
     aca:	21 96       	adiw	r28, 0x01	; 1
     acc:	cb 35       	cpi	r28, 0x5B	; 91
     ace:	d1 05       	cpc	r29, r1
     ad0:	69 f7       	brne	.-38     	; 0xaac <__stack+0x24d>
						   Servo_move_degree(shaft_pos);
						   _delay_ms(5);
					   }
					   while(DIO_readPIN('D',6)); // Do nothing until the exit sensor detects a car
     ad2:	84 e4       	ldi	r24, 0x44	; 68
     ad4:	66 e0       	ldi	r22, 0x06	; 6
     ad6:	0e 94 c9 01 	call	0x392	; 0x392 <DIO_readPIN>
     ada:	88 23       	and	r24, r24
     adc:	d1 f7       	brne	.-12     	; 0xad2 <__stack+0x273>
			   {
				   UART_vsendString("Welcome");
				   x = UART_u8receiveData();
				   if(x== 'o')
				   {
					   flagOUT = 1;
     ade:	44 24       	eor	r4, r4
     ae0:	43 94       	inc	r4
					   }
					   while(DIO_readPIN('D',6)); // Do nothing until the exit sensor detects a car
				   }
			   }				   				   
		   }
		   if(DIO_readPIN('D',6)==0)
     ae2:	84 e4       	ldi	r24, 0x44	; 68
     ae4:	66 e0       	ldi	r22, 0x06	; 6
     ae6:	0e 94 c9 01 	call	0x392	; 0x392 <DIO_readPIN>
     aea:	88 23       	and	r24, r24
     aec:	09 f0       	breq	.+2      	; 0xaf0 <__stack+0x291>
     aee:	b6 ce       	rjmp	.-660    	; 0x85c <main+0x106>
		   {
			   //while(UART_u8receiveData()!= 'c' || UART_u8receiveData()!= 'o');
			   if(flagOUT > 0)
     af0:	44 20       	and	r4, r4
     af2:	39 f1       	breq	.+78     	; 0xb42 <__stack+0x2e3>
			   {
				   x = UART_u8receiveData();
     af4:	0e 94 1b 08 	call	0x1036	; 0x1036 <UART_u8receiveData>
				   if(x == 'c')
     af8:	83 36       	cpi	r24, 0x63	; 99
     afa:	09 f0       	breq	.+2      	; 0xafe <__stack+0x29f>
     afc:	af ce       	rjmp	.-674    	; 0x85c <main+0x106>
				   {
					   led_vturnOff('D',7);
     afe:	84 e4       	ldi	r24, 0x44	; 68
     b00:	67 e0       	ldi	r22, 0x07	; 7
     b02:	0e 94 ee 06 	call	0xddc	; 0xddc <led_vturnOff>
					   for(shaft_pos=90;shaft_pos>=0;shaft_pos-=1){
     b06:	ca e5       	ldi	r28, 0x5A	; 90
     b08:	d0 e0       	ldi	r29, 0x00	; 0
						   Servo_move_degree(shaft_pos);
     b0a:	be 01       	movw	r22, r28
     b0c:	88 27       	eor	r24, r24
     b0e:	77 fd       	sbrc	r23, 7
     b10:	80 95       	com	r24
     b12:	98 2f       	mov	r25, r24
     b14:	0e 94 ca 08 	call	0x1194	; 0x1194 <__floatsisf>
     b18:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <Servo_move_degree>
     b1c:	af e0       	ldi	r26, 0x0F	; 15
     b1e:	b7 e2       	ldi	r27, 0x27	; 39
     b20:	11 97       	sbiw	r26, 0x01	; 1
     b22:	f1 f7       	brne	.-4      	; 0xb20 <__stack+0x2c1>
     b24:	00 c0       	rjmp	.+0      	; 0xb26 <__stack+0x2c7>
     b26:	00 00       	nop
			   {
				   x = UART_u8receiveData();
				   if(x == 'c')
				   {
					   led_vturnOff('D',7);
					   for(shaft_pos=90;shaft_pos>=0;shaft_pos-=1){
     b28:	21 97       	sbiw	r28, 0x01	; 1
     b2a:	bf ef       	ldi	r27, 0xFF	; 255
     b2c:	cf 3f       	cpi	r28, 0xFF	; 255
     b2e:	db 07       	cpc	r29, r27
     b30:	61 f7       	brne	.-40     	; 0xb0a <__stack+0x2ab>
						   Servo_move_degree(shaft_pos);
						   _delay_ms(5);
					   }
					   flagOUT = 0;
					   while(!DIO_readPIN('D',6)); // In case the car remains in front of the exit sensor while entering
     b32:	84 e4       	ldi	r24, 0x44	; 68
     b34:	66 e0       	ldi	r22, 0x06	; 6
     b36:	0e 94 c9 01 	call	0x392	; 0x392 <DIO_readPIN>
     b3a:	88 23       	and	r24, r24
     b3c:	d1 f3       	breq	.-12     	; 0xb32 <__stack+0x2d3>
					   led_vturnOff('D',7);
					   for(shaft_pos=90;shaft_pos>=0;shaft_pos-=1){
						   Servo_move_degree(shaft_pos);
						   _delay_ms(5);
					   }
					   flagOUT = 0;
     b3e:	44 24       	eor	r4, r4
     b40:	8d ce       	rjmp	.-742    	; 0x85c <main+0x106>
					   while(!DIO_readPIN('D',6)); // In case the car remains in front of the exit sensor while entering
				   }
			   }			   
			   else if(flagOUT == 0) // A car  is leaving the garage
			   {
					UART_vsendString("Bye");
     b42:	83 ea       	ldi	r24, 0xA3	; 163
     b44:	90 e0       	ldi	r25, 0x00	; 0
     b46:	0e 94 1f 08 	call	0x103e	; 0x103e <UART_vsendString>
					x = UART_u8receiveData();   
     b4a:	0e 94 1b 08 	call	0x1036	; 0x1036 <UART_u8receiveData>
				   if(x == 'o')
     b4e:	8f 36       	cpi	r24, 0x6F	; 111
     b50:	09 f0       	breq	.+2      	; 0xb54 <__stack+0x2f5>
     b52:	84 ce       	rjmp	.-760    	; 0x85c <main+0x106>
				   {
					   flagIN = 1;
					   lcd_CLRscreen();
     b54:	0e 94 c1 06 	call	0xd82	; 0xd82 <lcd_CLRscreen>
					   lcd_move_cursor(0,0);
     b58:	80 e0       	ldi	r24, 0x00	; 0
     b5a:	60 e0       	ldi	r22, 0x00	; 0
     b5c:	0e 94 cb 06 	call	0xd96	; 0xd96 <lcd_move_cursor>
					   lcd_vsend_string("Bye :)");
     b60:	87 ea       	ldi	r24, 0xA7	; 167
     b62:	90 e0       	ldi	r25, 0x00	; 0
     b64:	0e 94 b2 06 	call	0xd64	; 0xd64 <lcd_vsend_string>
					   led_vturnOn('D',7);
     b68:	84 e4       	ldi	r24, 0x44	; 68
     b6a:	67 e0       	ldi	r22, 0x07	; 7
     b6c:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <led_vturnOn>
					   for(shaft_pos=0;shaft_pos<=90;shaft_pos+=1){
     b70:	e4 01       	movw	r28, r8
						   Servo_move_degree(shaft_pos);
     b72:	be 01       	movw	r22, r28
     b74:	88 27       	eor	r24, r24
     b76:	77 fd       	sbrc	r23, 7
     b78:	80 95       	com	r24
     b7a:	98 2f       	mov	r25, r24
     b7c:	0e 94 ca 08 	call	0x1194	; 0x1194 <__floatsisf>
     b80:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <Servo_move_degree>
     b84:	8f e0       	ldi	r24, 0x0F	; 15
     b86:	97 e2       	ldi	r25, 0x27	; 39
     b88:	01 97       	sbiw	r24, 0x01	; 1
     b8a:	f1 f7       	brne	.-4      	; 0xb88 <__stack+0x329>
     b8c:	00 c0       	rjmp	.+0      	; 0xb8e <__stack+0x32f>
     b8e:	00 00       	nop
					   flagIN = 1;
					   lcd_CLRscreen();
					   lcd_move_cursor(0,0);
					   lcd_vsend_string("Bye :)");
					   led_vturnOn('D',7);
					   for(shaft_pos=0;shaft_pos<=90;shaft_pos+=1){
     b90:	21 96       	adiw	r28, 0x01	; 1
     b92:	cb 35       	cpi	r28, 0x5B	; 91
     b94:	d1 05       	cpc	r29, r1
     b96:	69 f7       	brne	.-38     	; 0xb72 <__stack+0x313>
						   Servo_move_degree(shaft_pos);
						   _delay_ms(5);
					   }
					   while(DIO_readPIN('D',4)); // Do nothing until the entrance sensor detects a car
     b98:	84 e4       	ldi	r24, 0x44	; 68
     b9a:	64 e0       	ldi	r22, 0x04	; 4
     b9c:	0e 94 c9 01 	call	0x392	; 0x392 <DIO_readPIN>
     ba0:	88 23       	and	r24, r24
     ba2:	d1 f7       	brne	.-12     	; 0xb98 <__stack+0x339>
			   {
					UART_vsendString("Bye");
					x = UART_u8receiveData();   
				   if(x == 'o')
				   {
					   flagIN = 1;
     ba4:	33 24       	eor	r3, r3
     ba6:	33 94       	inc	r3
     ba8:	59 ce       	rjmp	.-846    	; 0x85c <main+0x106>

00000baa <__vector_5>:
		   
    }
	
}
ISR(TIMER2_OVF_vect)
{
     baa:	1f 92       	push	r1
     bac:	0f 92       	push	r0
     bae:	0f b6       	in	r0, 0x3f	; 63
     bb0:	0f 92       	push	r0
     bb2:	11 24       	eor	r1, r1
     bb4:	8f 93       	push	r24
     bb6:	9f 93       	push	r25
	if(counter==92)
     bb8:	80 91 b2 00 	lds	r24, 0x00B2
     bbc:	90 91 b3 00 	lds	r25, 0x00B3
     bc0:	8c 35       	cpi	r24, 0x5C	; 92
     bc2:	91 05       	cpc	r25, r1
     bc4:	29 f4       	brne	.+10     	; 0xbd0 <__vector_5+0x26>
	{
		TCNT2=0;
     bc6:	14 bc       	out	0x24, r1	; 36
		counter = 0;
     bc8:	10 92 b3 00 	sts	0x00B3, r1
     bcc:	10 92 b2 00 	sts	0x00B2, r1
	}
	counter++;
     bd0:	80 91 b2 00 	lds	r24, 0x00B2
     bd4:	90 91 b3 00 	lds	r25, 0x00B3
     bd8:	01 96       	adiw	r24, 0x01	; 1
     bda:	90 93 b3 00 	sts	0x00B3, r25
     bde:	80 93 b2 00 	sts	0x00B2, r24
     be2:	9f 91       	pop	r25
     be4:	8f 91       	pop	r24
     be6:	0f 90       	pop	r0
     be8:	0f be       	out	0x3f, r0	; 63
     bea:	0f 90       	pop	r0
     bec:	1f 90       	pop	r1
     bee:	18 95       	reti

00000bf0 <send_falling_edge>:
     bf0:	82 e4       	ldi	r24, 0x42	; 66
     bf2:	60 e0       	ldi	r22, 0x00	; 0
     bf4:	41 e0       	ldi	r20, 0x01	; 1
     bf6:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <DIO_vwritePIN>
     bfa:	8f e9       	ldi	r24, 0x9F	; 159
     bfc:	9f e0       	ldi	r25, 0x0F	; 15
     bfe:	01 97       	sbiw	r24, 0x01	; 1
     c00:	f1 f7       	brne	.-4      	; 0xbfe <send_falling_edge+0xe>
     c02:	00 c0       	rjmp	.+0      	; 0xc04 <send_falling_edge+0x14>
     c04:	00 00       	nop
     c06:	82 e4       	ldi	r24, 0x42	; 66
     c08:	60 e0       	ldi	r22, 0x00	; 0
     c0a:	40 e0       	ldi	r20, 0x00	; 0
     c0c:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <DIO_vwritePIN>
     c10:	8f e9       	ldi	r24, 0x9F	; 159
     c12:	9f e0       	ldi	r25, 0x0F	; 15
     c14:	01 97       	sbiw	r24, 0x01	; 1
     c16:	f1 f7       	brne	.-4      	; 0xc14 <send_falling_edge+0x24>
     c18:	00 c0       	rjmp	.+0      	; 0xc1a <send_falling_edge+0x2a>
     c1a:	00 00       	nop
     c1c:	08 95       	ret

00000c1e <lcd_vsend_cmd>:
     c1e:	cf 93       	push	r28
     c20:	c8 2f       	mov	r28, r24
     c22:	68 2f       	mov	r22, r24
     c24:	62 95       	swap	r22
     c26:	6f 70       	andi	r22, 0x0F	; 15
     c28:	81 e4       	ldi	r24, 0x41	; 65
     c2a:	0e 94 76 03 	call	0x6ec	; 0x6ec <DIO_vwrite_high_nibble>
     c2e:	82 e4       	ldi	r24, 0x42	; 66
     c30:	61 e0       	ldi	r22, 0x01	; 1
     c32:	40 e0       	ldi	r20, 0x00	; 0
     c34:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <DIO_vwritePIN>
     c38:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <send_falling_edge>
     c3c:	81 e4       	ldi	r24, 0x41	; 65
     c3e:	6c 2f       	mov	r22, r28
     c40:	0e 94 76 03 	call	0x6ec	; 0x6ec <DIO_vwrite_high_nibble>
     c44:	82 e4       	ldi	r24, 0x42	; 66
     c46:	61 e0       	ldi	r22, 0x01	; 1
     c48:	40 e0       	ldi	r20, 0x00	; 0
     c4a:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <DIO_vwritePIN>
     c4e:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <send_falling_edge>
     c52:	8f ec       	ldi	r24, 0xCF	; 207
     c54:	97 e0       	ldi	r25, 0x07	; 7
     c56:	01 97       	sbiw	r24, 0x01	; 1
     c58:	f1 f7       	brne	.-4      	; 0xc56 <lcd_vsend_cmd+0x38>
     c5a:	00 c0       	rjmp	.+0      	; 0xc5c <lcd_vsend_cmd+0x3e>
     c5c:	00 00       	nop
     c5e:	cf 91       	pop	r28
     c60:	08 95       	ret

00000c62 <lcd_vinit>:
     c62:	8f ef       	ldi	r24, 0xFF	; 255
     c64:	91 ee       	ldi	r25, 0xE1	; 225
     c66:	a4 e0       	ldi	r26, 0x04	; 4
     c68:	81 50       	subi	r24, 0x01	; 1
     c6a:	90 40       	sbci	r25, 0x00	; 0
     c6c:	a0 40       	sbci	r26, 0x00	; 0
     c6e:	e1 f7       	brne	.-8      	; 0xc68 <lcd_vinit+0x6>
     c70:	00 c0       	rjmp	.+0      	; 0xc72 <lcd_vinit+0x10>
     c72:	00 00       	nop
     c74:	81 e4       	ldi	r24, 0x41	; 65
     c76:	64 e0       	ldi	r22, 0x04	; 4
     c78:	41 e0       	ldi	r20, 0x01	; 1
     c7a:	0e 94 5a 00 	call	0xb4	; 0xb4 <DIO_vsetPINDir>
     c7e:	81 e4       	ldi	r24, 0x41	; 65
     c80:	65 e0       	ldi	r22, 0x05	; 5
     c82:	41 e0       	ldi	r20, 0x01	; 1
     c84:	0e 94 5a 00 	call	0xb4	; 0xb4 <DIO_vsetPINDir>
     c88:	81 e4       	ldi	r24, 0x41	; 65
     c8a:	66 e0       	ldi	r22, 0x06	; 6
     c8c:	41 e0       	ldi	r20, 0x01	; 1
     c8e:	0e 94 5a 00 	call	0xb4	; 0xb4 <DIO_vsetPINDir>
     c92:	81 e4       	ldi	r24, 0x41	; 65
     c94:	67 e0       	ldi	r22, 0x07	; 7
     c96:	41 e0       	ldi	r20, 0x01	; 1
     c98:	0e 94 5a 00 	call	0xb4	; 0xb4 <DIO_vsetPINDir>
     c9c:	82 e4       	ldi	r24, 0x42	; 66
     c9e:	60 e0       	ldi	r22, 0x00	; 0
     ca0:	41 e0       	ldi	r20, 0x01	; 1
     ca2:	0e 94 5a 00 	call	0xb4	; 0xb4 <DIO_vsetPINDir>
     ca6:	82 e4       	ldi	r24, 0x42	; 66
     ca8:	62 e0       	ldi	r22, 0x02	; 2
     caa:	41 e0       	ldi	r20, 0x01	; 1
     cac:	0e 94 5a 00 	call	0xb4	; 0xb4 <DIO_vsetPINDir>
     cb0:	82 e4       	ldi	r24, 0x42	; 66
     cb2:	61 e0       	ldi	r22, 0x01	; 1
     cb4:	41 e0       	ldi	r20, 0x01	; 1
     cb6:	0e 94 5a 00 	call	0xb4	; 0xb4 <DIO_vsetPINDir>
     cba:	82 e4       	ldi	r24, 0x42	; 66
     cbc:	62 e0       	ldi	r22, 0x02	; 2
     cbe:	40 e0       	ldi	r20, 0x00	; 0
     cc0:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <DIO_vwritePIN>
     cc4:	82 e0       	ldi	r24, 0x02	; 2
     cc6:	0e 94 0f 06 	call	0xc1e	; 0xc1e <lcd_vsend_cmd>
     cca:	af e1       	ldi	r26, 0x1F	; 31
     ccc:	be e4       	ldi	r27, 0x4E	; 78
     cce:	11 97       	sbiw	r26, 0x01	; 1
     cd0:	f1 f7       	brne	.-4      	; 0xcce <lcd_vinit+0x6c>
     cd2:	00 c0       	rjmp	.+0      	; 0xcd4 <lcd_vinit+0x72>
     cd4:	00 00       	nop
     cd6:	88 e2       	ldi	r24, 0x28	; 40
     cd8:	0e 94 0f 06 	call	0xc1e	; 0xc1e <lcd_vsend_cmd>
     cdc:	8f ec       	ldi	r24, 0xCF	; 207
     cde:	97 e0       	ldi	r25, 0x07	; 7
     ce0:	01 97       	sbiw	r24, 0x01	; 1
     ce2:	f1 f7       	brne	.-4      	; 0xce0 <lcd_vinit+0x7e>
     ce4:	00 c0       	rjmp	.+0      	; 0xce6 <lcd_vinit+0x84>
     ce6:	00 00       	nop
     ce8:	8f e0       	ldi	r24, 0x0F	; 15
     cea:	0e 94 0f 06 	call	0xc1e	; 0xc1e <lcd_vsend_cmd>
     cee:	af ec       	ldi	r26, 0xCF	; 207
     cf0:	b7 e0       	ldi	r27, 0x07	; 7
     cf2:	11 97       	sbiw	r26, 0x01	; 1
     cf4:	f1 f7       	brne	.-4      	; 0xcf2 <lcd_vinit+0x90>
     cf6:	00 c0       	rjmp	.+0      	; 0xcf8 <lcd_vinit+0x96>
     cf8:	00 00       	nop
     cfa:	81 e0       	ldi	r24, 0x01	; 1
     cfc:	0e 94 0f 06 	call	0xc1e	; 0xc1e <lcd_vsend_cmd>
     d00:	8f e1       	ldi	r24, 0x1F	; 31
     d02:	9e e4       	ldi	r25, 0x4E	; 78
     d04:	01 97       	sbiw	r24, 0x01	; 1
     d06:	f1 f7       	brne	.-4      	; 0xd04 <lcd_vinit+0xa2>
     d08:	00 c0       	rjmp	.+0      	; 0xd0a <lcd_vinit+0xa8>
     d0a:	00 00       	nop
     d0c:	86 e0       	ldi	r24, 0x06	; 6
     d0e:	0e 94 0f 06 	call	0xc1e	; 0xc1e <lcd_vsend_cmd>
     d12:	af ec       	ldi	r26, 0xCF	; 207
     d14:	b7 e0       	ldi	r27, 0x07	; 7
     d16:	11 97       	sbiw	r26, 0x01	; 1
     d18:	f1 f7       	brne	.-4      	; 0xd16 <lcd_vinit+0xb4>
     d1a:	00 c0       	rjmp	.+0      	; 0xd1c <lcd_vinit+0xba>
     d1c:	00 00       	nop
     d1e:	08 95       	ret

00000d20 <lcd_vsend_char>:
     d20:	cf 93       	push	r28
     d22:	c8 2f       	mov	r28, r24
     d24:	68 2f       	mov	r22, r24
     d26:	62 95       	swap	r22
     d28:	6f 70       	andi	r22, 0x0F	; 15
     d2a:	81 e4       	ldi	r24, 0x41	; 65
     d2c:	0e 94 76 03 	call	0x6ec	; 0x6ec <DIO_vwrite_high_nibble>
     d30:	82 e4       	ldi	r24, 0x42	; 66
     d32:	61 e0       	ldi	r22, 0x01	; 1
     d34:	41 e0       	ldi	r20, 0x01	; 1
     d36:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <DIO_vwritePIN>
     d3a:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <send_falling_edge>
     d3e:	81 e4       	ldi	r24, 0x41	; 65
     d40:	6c 2f       	mov	r22, r28
     d42:	0e 94 76 03 	call	0x6ec	; 0x6ec <DIO_vwrite_high_nibble>
     d46:	82 e4       	ldi	r24, 0x42	; 66
     d48:	61 e0       	ldi	r22, 0x01	; 1
     d4a:	41 e0       	ldi	r20, 0x01	; 1
     d4c:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <DIO_vwritePIN>
     d50:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <send_falling_edge>
     d54:	8f ec       	ldi	r24, 0xCF	; 207
     d56:	97 e0       	ldi	r25, 0x07	; 7
     d58:	01 97       	sbiw	r24, 0x01	; 1
     d5a:	f1 f7       	brne	.-4      	; 0xd58 <lcd_vsend_char+0x38>
     d5c:	00 c0       	rjmp	.+0      	; 0xd5e <lcd_vsend_char+0x3e>
     d5e:	00 00       	nop
     d60:	cf 91       	pop	r28
     d62:	08 95       	ret

00000d64 <lcd_vsend_string>:
     d64:	cf 93       	push	r28
     d66:	df 93       	push	r29
     d68:	ec 01       	movw	r28, r24
     d6a:	88 81       	ld	r24, Y
     d6c:	88 23       	and	r24, r24
     d6e:	31 f0       	breq	.+12     	; 0xd7c <lcd_vsend_string+0x18>
     d70:	21 96       	adiw	r28, 0x01	; 1
     d72:	0e 94 90 06 	call	0xd20	; 0xd20 <lcd_vsend_char>
     d76:	89 91       	ld	r24, Y+
     d78:	88 23       	and	r24, r24
     d7a:	d9 f7       	brne	.-10     	; 0xd72 <lcd_vsend_string+0xe>
     d7c:	df 91       	pop	r29
     d7e:	cf 91       	pop	r28
     d80:	08 95       	ret

00000d82 <lcd_CLRscreen>:
     d82:	81 e0       	ldi	r24, 0x01	; 1
     d84:	0e 94 0f 06 	call	0xc1e	; 0xc1e <lcd_vsend_cmd>
     d88:	8f e1       	ldi	r24, 0x1F	; 31
     d8a:	9e e4       	ldi	r25, 0x4E	; 78
     d8c:	01 97       	sbiw	r24, 0x01	; 1
     d8e:	f1 f7       	brne	.-4      	; 0xd8c <lcd_CLRscreen+0xa>
     d90:	00 c0       	rjmp	.+0      	; 0xd92 <lcd_CLRscreen+0x10>
     d92:	00 00       	nop
     d94:	08 95       	ret

00000d96 <lcd_move_cursor>:
     d96:	82 30       	cpi	r24, 0x02	; 2
     d98:	60 f4       	brcc	.+24     	; 0xdb2 <lcd_move_cursor+0x1c>
     d9a:	60 31       	cpi	r22, 0x10	; 16
     d9c:	60 f4       	brcc	.+24     	; 0xdb6 <lcd_move_cursor+0x20>
     d9e:	88 23       	and	r24, r24
     da0:	19 f4       	brne	.+6      	; 0xda8 <lcd_move_cursor+0x12>
     da2:	96 2f       	mov	r25, r22
     da4:	90 58       	subi	r25, 0x80	; 128
     da6:	08 c0       	rjmp	.+16     	; 0xdb8 <lcd_move_cursor+0x22>
     da8:	81 30       	cpi	r24, 0x01	; 1
     daa:	31 f4       	brne	.+12     	; 0xdb8 <lcd_move_cursor+0x22>
     dac:	96 2f       	mov	r25, r22
     dae:	90 54       	subi	r25, 0x40	; 64
     db0:	03 c0       	rjmp	.+6      	; 0xdb8 <lcd_move_cursor+0x22>
     db2:	90 e8       	ldi	r25, 0x80	; 128
     db4:	01 c0       	rjmp	.+2      	; 0xdb8 <lcd_move_cursor+0x22>
     db6:	90 e8       	ldi	r25, 0x80	; 128
     db8:	89 2f       	mov	r24, r25
     dba:	0e 94 0f 06 	call	0xc1e	; 0xc1e <lcd_vsend_cmd>
     dbe:	8f ec       	ldi	r24, 0xCF	; 207
     dc0:	97 e0       	ldi	r25, 0x07	; 7
     dc2:	01 97       	sbiw	r24, 0x01	; 1
     dc4:	f1 f7       	brne	.-4      	; 0xdc2 <lcd_move_cursor+0x2c>
     dc6:	00 c0       	rjmp	.+0      	; 0xdc8 <lcd_move_cursor+0x32>
     dc8:	00 00       	nop
     dca:	08 95       	ret

00000dcc <led_vinit>:
 *  Author: user
 */ 
#include "DIO.h"
void led_vinit(unsigned char port ,unsigned char pin)
{
	DIO_vsetPINDir(port,pin,1);
     dcc:	41 e0       	ldi	r20, 0x01	; 1
     dce:	0e 94 5a 00 	call	0xb4	; 0xb4 <DIO_vsetPINDir>
}
     dd2:	08 95       	ret

00000dd4 <led_vturnOn>:
void led_vturnOn(unsigned char port ,unsigned char pin)
{
	DIO_vwritePIN(port,pin,1);
     dd4:	41 e0       	ldi	r20, 0x01	; 1
     dd6:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <DIO_vwritePIN>
}
     dda:	08 95       	ret

00000ddc <led_vturnOff>:
void led_vturnOff(unsigned char port ,unsigned char pin)
{
	DIO_vwritePIN(port,pin,0);
     ddc:	40 e0       	ldi	r20, 0x00	; 0
     dde:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <DIO_vwritePIN>
}
     de2:	08 95       	ret

00000de4 <led_vtoggle>:
void led_vtoggle(unsigned char port ,unsigned char pin)
{
	DIO_vtogglePIN(port,pin);
     de4:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <DIO_vtogglePIN>
     de8:	08 95       	ret

00000dea <Servo_init>:
     dea:	41 e0       	ldi	r20, 0x01	; 1
     dec:	0e 94 5a 00 	call	0xb4	; 0xb4 <DIO_vsetPINDir>
     df0:	08 95       	ret

00000df2 <Servo_move_degree>:
     df2:	21 e6       	ldi	r18, 0x61	; 97
     df4:	3b e0       	ldi	r19, 0x0B	; 11
     df6:	46 eb       	ldi	r20, 0xB6	; 182
     df8:	5b e3       	ldi	r21, 0x3B	; 59
     dfa:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <__mulsf3>
     dfe:	29 eb       	ldi	r18, 0xB9	; 185
     e00:	3c ef       	ldi	r19, 0xFC	; 252
     e02:	4f eb       	ldi	r20, 0xBF	; 191
     e04:	5f e3       	ldi	r21, 0x3F	; 63
     e06:	0e 94 38 08 	call	0x1070	; 0x1070 <__addsf3>
     e0a:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <timer1_fast_PWM_wave>
     e0e:	08 95       	ret

00000e10 <UltraSOnic_vinit>:
     e10:	41 e0       	ldi	r20, 0x01	; 1
     e12:	0e 94 5a 00 	call	0xb4	; 0xb4 <DIO_vsetPINDir>
     e16:	78 94       	sei
     e18:	8b b7       	in	r24, 0x3b	; 59
     e1a:	80 64       	ori	r24, 0x40	; 64
     e1c:	8b bf       	out	0x3b, r24	; 59
     e1e:	85 b7       	in	r24, 0x35	; 53
     e20:	81 60       	ori	r24, 0x01	; 1
     e22:	85 bf       	out	0x35, r24	; 53
     e24:	08 95       	ret

00000e26 <UltraSOnic_vtrigger>:
     e26:	cf 93       	push	r28
     e28:	df 93       	push	r29
     e2a:	d8 2f       	mov	r29, r24
     e2c:	c6 2f       	mov	r28, r22
     e2e:	80 91 b1 00 	lds	r24, 0x00B1
     e32:	88 23       	and	r24, r24
     e34:	d1 f4       	brne	.+52     	; 0xe6a <UltraSOnic_vtrigger+0x44>
     e36:	8d 2f       	mov	r24, r29
     e38:	41 e0       	ldi	r20, 0x01	; 1
     e3a:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <DIO_vwritePIN>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     e3e:	88 e2       	ldi	r24, 0x28	; 40
     e40:	8a 95       	dec	r24
     e42:	f1 f7       	brne	.-4      	; 0xe40 <UltraSOnic_vtrigger+0x1a>
     e44:	8d 2f       	mov	r24, r29
     e46:	6c 2f       	mov	r22, r28
     e48:	40 e0       	ldi	r20, 0x00	; 0
     e4a:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <DIO_vwritePIN>
     e4e:	81 e0       	ldi	r24, 0x01	; 1
     e50:	80 93 b1 00 	sts	0x00B1, r24
     e54:	83 bf       	out	0x33, r24	; 51
     e56:	89 b7       	in	r24, 0x39	; 57
     e58:	81 60       	ori	r24, 0x01	; 1
     e5a:	89 bf       	out	0x39, r24	; 57
     e5c:	20 91 b4 00 	lds	r18, 0x00B4
     e60:	30 91 b5 00 	lds	r19, 0x00B5
     e64:	82 2f       	mov	r24, r18
     e66:	93 2f       	mov	r25, r19
     e68:	00 c0       	rjmp	.+0      	; 0xe6a <UltraSOnic_vtrigger+0x44>
     e6a:	df 91       	pop	r29
     e6c:	cf 91       	pop	r28
     e6e:	08 95       	ret

00000e70 <__vector_1>:
     e70:	1f 92       	push	r1
     e72:	0f 92       	push	r0
     e74:	0f b6       	in	r0, 0x3f	; 63
     e76:	0f 92       	push	r0
     e78:	11 24       	eor	r1, r1
     e7a:	2f 93       	push	r18
     e7c:	3f 93       	push	r19
     e7e:	4f 93       	push	r20
     e80:	5f 93       	push	r21
     e82:	6f 93       	push	r22
     e84:	7f 93       	push	r23
     e86:	8f 93       	push	r24
     e88:	9f 93       	push	r25
     e8a:	af 93       	push	r26
     e8c:	bf 93       	push	r27
     e8e:	ef 93       	push	r30
     e90:	ff 93       	push	r31
     e92:	80 91 b1 00 	lds	r24, 0x00B1
     e96:	81 30       	cpi	r24, 0x01	; 1
     e98:	a1 f5       	brne	.+104    	; 0xf02 <__vector_1+0x92>
     e9a:	80 91 b0 00 	lds	r24, 0x00B0
     e9e:	88 23       	and	r24, r24
     ea0:	49 f4       	brne	.+18     	; 0xeb4 <__vector_1+0x44>
     ea2:	12 be       	out	0x32, r1	; 50
     ea4:	81 e0       	ldi	r24, 0x01	; 1
     ea6:	80 93 b0 00 	sts	0x00B0, r24
     eaa:	10 92 af 00 	sts	0x00AF, r1
     eae:	10 92 ae 00 	sts	0x00AE, r1
     eb2:	27 c0       	rjmp	.+78     	; 0xf02 <__vector_1+0x92>
     eb4:	60 91 ae 00 	lds	r22, 0x00AE
     eb8:	70 91 af 00 	lds	r23, 0x00AF
     ebc:	82 b7       	in	r24, 0x32	; 50
     ebe:	76 2f       	mov	r23, r22
     ec0:	66 27       	eor	r22, r22
     ec2:	68 0f       	add	r22, r24
     ec4:	71 1d       	adc	r23, r1
     ec6:	80 e0       	ldi	r24, 0x00	; 0
     ec8:	90 e0       	ldi	r25, 0x00	; 0
     eca:	28 e2       	ldi	r18, 0x28	; 40
     ecc:	37 e8       	ldi	r19, 0x87	; 135
     ece:	40 e0       	ldi	r20, 0x00	; 0
     ed0:	50 e0       	ldi	r21, 0x00	; 0
     ed2:	0e 94 e1 09 	call	0x13c2	; 0x13c2 <__mulsi3>
     ed6:	20 e0       	ldi	r18, 0x00	; 0
     ed8:	34 e2       	ldi	r19, 0x24	; 36
     eda:	44 ef       	ldi	r20, 0xF4	; 244
     edc:	50 e0       	ldi	r21, 0x00	; 0
     ede:	0e 94 14 0a 	call	0x1428	; 0x1428 <__udivmodsi4>
     ee2:	30 93 b5 00 	sts	0x00B5, r19
     ee6:	20 93 b4 00 	sts	0x00B4, r18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     eea:	8f e2       	ldi	r24, 0x2F	; 47
     eec:	95 e7       	ldi	r25, 0x75	; 117
     eee:	01 97       	sbiw	r24, 0x01	; 1
     ef0:	f1 f7       	brne	.-4      	; 0xeee <__vector_1+0x7e>
     ef2:	00 c0       	rjmp	.+0      	; 0xef4 <__vector_1+0x84>
     ef4:	00 00       	nop
     ef6:	10 92 af 00 	sts	0x00AF, r1
     efa:	10 92 ae 00 	sts	0x00AE, r1
     efe:	10 92 b0 00 	sts	0x00B0, r1
     f02:	ff 91       	pop	r31
     f04:	ef 91       	pop	r30
     f06:	bf 91       	pop	r27
     f08:	af 91       	pop	r26
     f0a:	9f 91       	pop	r25
     f0c:	8f 91       	pop	r24
     f0e:	7f 91       	pop	r23
     f10:	6f 91       	pop	r22
     f12:	5f 91       	pop	r21
     f14:	4f 91       	pop	r20
     f16:	3f 91       	pop	r19
     f18:	2f 91       	pop	r18
     f1a:	0f 90       	pop	r0
     f1c:	0f be       	out	0x3f, r0	; 63
     f1e:	0f 90       	pop	r0
     f20:	1f 90       	pop	r1
     f22:	18 95       	reti

00000f24 <__vector_11>:
     f24:	1f 92       	push	r1
     f26:	0f 92       	push	r0
     f28:	0f b6       	in	r0, 0x3f	; 63
     f2a:	0f 92       	push	r0
     f2c:	11 24       	eor	r1, r1
     f2e:	2f 93       	push	r18
     f30:	8f 93       	push	r24
     f32:	9f 93       	push	r25
     f34:	80 91 ae 00 	lds	r24, 0x00AE
     f38:	90 91 af 00 	lds	r25, 0x00AF
     f3c:	01 96       	adiw	r24, 0x01	; 1
     f3e:	90 93 af 00 	sts	0x00AF, r25
     f42:	80 93 ae 00 	sts	0x00AE, r24
     f46:	80 91 ae 00 	lds	r24, 0x00AE
     f4a:	90 91 af 00 	lds	r25, 0x00AF
     f4e:	23 e0       	ldi	r18, 0x03	; 3
     f50:	88 3e       	cpi	r24, 0xE8	; 232
     f52:	92 07       	cpc	r25, r18
     f54:	49 f4       	brne	.+18     	; 0xf68 <__vector_11+0x44>
     f56:	12 be       	out	0x32, r1	; 50
     f58:	10 92 b1 00 	sts	0x00B1, r1
     f5c:	10 92 b0 00 	sts	0x00B0, r1
     f60:	10 92 af 00 	sts	0x00AF, r1
     f64:	10 92 ae 00 	sts	0x00AE, r1
     f68:	9f 91       	pop	r25
     f6a:	8f 91       	pop	r24
     f6c:	2f 91       	pop	r18
     f6e:	0f 90       	pop	r0
     f70:	0f be       	out	0x3f, r0	; 63
     f72:	0f 90       	pop	r0
     f74:	1f 90       	pop	r1
     f76:	18 95       	reti

00000f78 <timer2_overflow_mode>:
     f78:	78 94       	sei
     f7a:	87 e0       	ldi	r24, 0x07	; 7
     f7c:	85 bd       	out	0x25, r24	; 37
     f7e:	89 b7       	in	r24, 0x39	; 57
     f80:	80 64       	ori	r24, 0x40	; 64
     f82:	89 bf       	out	0x39, r24	; 57
     f84:	08 95       	ret

00000f86 <timer0_CTC_init_interrupt>:
     f86:	83 b7       	in	r24, 0x33	; 51
     f88:	88 60       	ori	r24, 0x08	; 8
     f8a:	83 bf       	out	0x33, r24	; 51
     f8c:	80 e5       	ldi	r24, 0x50	; 80
     f8e:	8c bf       	out	0x3c, r24	; 60
     f90:	83 b7       	in	r24, 0x33	; 51
     f92:	81 60       	ori	r24, 0x01	; 1
     f94:	83 bf       	out	0x33, r24	; 51
     f96:	83 b7       	in	r24, 0x33	; 51
     f98:	84 60       	ori	r24, 0x04	; 4
     f9a:	83 bf       	out	0x33, r24	; 51
     f9c:	78 94       	sei
     f9e:	89 b7       	in	r24, 0x39	; 57
     fa0:	82 60       	ori	r24, 0x02	; 2
     fa2:	89 bf       	out	0x39, r24	; 57
     fa4:	08 95       	ret

00000fa6 <timer1_fast_PWM_wave>:
     fa6:	8d 9a       	sbi	0x11, 5	; 17
     fa8:	2e b5       	in	r18, 0x2e	; 46
     faa:	20 61       	ori	r18, 0x10	; 16
     fac:	2e bd       	out	0x2e, r18	; 46
     fae:	2e b5       	in	r18, 0x2e	; 46
     fb0:	28 60       	ori	r18, 0x08	; 8
     fb2:	2e bd       	out	0x2e, r18	; 46
     fb4:	2f b5       	in	r18, 0x2f	; 47
     fb6:	22 60       	ori	r18, 0x02	; 2
     fb8:	2f bd       	out	0x2f, r18	; 47
     fba:	20 e0       	ldi	r18, 0x00	; 0
     fbc:	30 e0       	ldi	r19, 0x00	; 0
     fbe:	4a e7       	ldi	r20, 0x7A	; 122
     fc0:	54 e4       	ldi	r21, 0x44	; 68
     fc2:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <__mulsf3>
     fc6:	0e 94 9c 08 	call	0x1138	; 0x1138 <__fixunssfsi>
     fca:	dc 01       	movw	r26, r24
     fcc:	cb 01       	movw	r24, r22
     fce:	9b bd       	out	0x2b, r25	; 43
     fd0:	8a bd       	out	0x2a, r24	; 42
     fd2:	8f e1       	ldi	r24, 0x1F	; 31
     fd4:	9e e4       	ldi	r25, 0x4E	; 78
     fd6:	97 bd       	out	0x27, r25	; 39
     fd8:	86 bd       	out	0x26, r24	; 38
     fda:	8e b5       	in	r24, 0x2e	; 46
     fdc:	82 60       	ori	r24, 0x02	; 2
     fde:	8e bd       	out	0x2e, r24	; 46
     fe0:	8f b5       	in	r24, 0x2f	; 47
     fe2:	80 68       	ori	r24, 0x80	; 128
     fe4:	8f bd       	out	0x2f, r24	; 47
     fe6:	08 95       	ret

00000fe8 <UART_vinit>:
#include "std_macros.h"
#define F_CPU 8000000UL
#include <avr/io.h>
#include <util/delay.h>
void UART_vinit(unsigned long baudrate)
{
     fe8:	dc 01       	movw	r26, r24
     fea:	cb 01       	movw	r24, r22
	unsigned short UBRR;
	UBRR=(F_CPU/(16*baudrate))-1;
     fec:	88 0f       	add	r24, r24
     fee:	99 1f       	adc	r25, r25
     ff0:	aa 1f       	adc	r26, r26
     ff2:	bb 1f       	adc	r27, r27
     ff4:	88 0f       	add	r24, r24
     ff6:	99 1f       	adc	r25, r25
     ff8:	aa 1f       	adc	r26, r26
     ffa:	bb 1f       	adc	r27, r27
     ffc:	9c 01       	movw	r18, r24
     ffe:	ad 01       	movw	r20, r26
    1000:	22 0f       	add	r18, r18
    1002:	33 1f       	adc	r19, r19
    1004:	44 1f       	adc	r20, r20
    1006:	55 1f       	adc	r21, r21
    1008:	22 0f       	add	r18, r18
    100a:	33 1f       	adc	r19, r19
    100c:	44 1f       	adc	r20, r20
    100e:	55 1f       	adc	r21, r21
    1010:	60 e0       	ldi	r22, 0x00	; 0
    1012:	72 e1       	ldi	r23, 0x12	; 18
    1014:	8a e7       	ldi	r24, 0x7A	; 122
    1016:	90 e0       	ldi	r25, 0x00	; 0
    1018:	0e 94 14 0a 	call	0x1428	; 0x1428 <__udivmodsi4>
    101c:	21 50       	subi	r18, 0x01	; 1
    101e:	30 40       	sbci	r19, 0x00	; 0
	UBRRH=(unsigned char)(UBRR>>8);
    1020:	30 bd       	out	0x20, r19	; 32
	UBRRL=(unsigned char)(UBRR);
    1022:	29 b9       	out	0x09, r18	; 9
	//Enable USART sender and receiver
	SET_BIT(UCSRB,TXEN);
    1024:	53 9a       	sbi	0x0a, 3	; 10
	SET_BIT(UCSRB,RXEN);
    1026:	54 9a       	sbi	0x0a, 4	; 10
	//Set it to send 8 bits of data, 1 stop bit, and no parity bits
	UCSRC=(1<<URSEL)|(1<<UCSZ1)|(1<<UCSZ0);
    1028:	86 e8       	ldi	r24, 0x86	; 134
    102a:	80 bd       	out	0x20, r24	; 32
}
    102c:	08 95       	ret

0000102e <UART_vsendData>:

void UART_vsendData(char data)
{
	//Wait for UDR transmit buffer to be empty 
	while(READ_BIT(UCSRA,UDRE)==0);
    102e:	5d 9b       	sbis	0x0b, 5	; 11
    1030:	fe cf       	rjmp	.-4      	; 0x102e <UART_vsendData>
	//Send data to UDR transmit buffer
	UDR=data;
    1032:	8c b9       	out	0x0c, r24	; 12
}
    1034:	08 95       	ret

00001036 <UART_u8receiveData>:

char UART_u8receiveData(void)
{	
	//Wait for UDR receive buffer to be full
	while(READ_BIT(UCSRA,RXC)==0);
    1036:	5f 9b       	sbis	0x0b, 7	; 11
    1038:	fe cf       	rjmp	.-4      	; 0x1036 <UART_u8receiveData>
	//Read data from UDR receive buffer
	return UDR;		
    103a:	8c b1       	in	r24, 0x0c	; 12
}
    103c:	08 95       	ret

0000103e <UART_vsendString>:

void UART_vsendString(char *ptr)
{
    103e:	cf 93       	push	r28
    1040:	df 93       	push	r29
    1042:	ec 01       	movw	r28, r24
	while(*ptr!=0)
    1044:	88 81       	ld	r24, Y
    1046:	88 23       	and	r24, r24
    1048:	79 f0       	breq	.+30     	; 0x1068 <UART_vsendString+0x2a>
	while(READ_BIT(UCSRA,RXC)==0);
	//Read data from UDR receive buffer
	return UDR;		
}

void UART_vsendString(char *ptr)
    104a:	21 96       	adiw	r28, 0x01	; 1
{
	while(*ptr!=0)
	{
		UART_vsendData(*ptr);
    104c:	0e 94 17 08 	call	0x102e	; 0x102e <UART_vsendData>
    1050:	8f ef       	ldi	r24, 0xFF	; 255
    1052:	90 e7       	ldi	r25, 0x70	; 112
    1054:	a2 e0       	ldi	r26, 0x02	; 2
    1056:	81 50       	subi	r24, 0x01	; 1
    1058:	90 40       	sbci	r25, 0x00	; 0
    105a:	a0 40       	sbci	r26, 0x00	; 0
    105c:	e1 f7       	brne	.-8      	; 0x1056 <UART_vsendString+0x18>
    105e:	00 c0       	rjmp	.+0      	; 0x1060 <UART_vsendString+0x22>
    1060:	00 00       	nop
	return UDR;		
}

void UART_vsendString(char *ptr)
{
	while(*ptr!=0)
    1062:	89 91       	ld	r24, Y+
    1064:	88 23       	and	r24, r24
    1066:	91 f7       	brne	.-28     	; 0x104c <UART_vsendString+0xe>
	{
		UART_vsendData(*ptr);
		ptr++;
		_delay_ms(100);
	}
    1068:	df 91       	pop	r29
    106a:	cf 91       	pop	r28
    106c:	08 95       	ret

0000106e <__subsf3>:
    106e:	50 58       	subi	r21, 0x80	; 128

00001070 <__addsf3>:
    1070:	bb 27       	eor	r27, r27
    1072:	aa 27       	eor	r26, r26
    1074:	0e d0       	rcall	.+28     	; 0x1092 <__addsf3x>
    1076:	e0 c0       	rjmp	.+448    	; 0x1238 <__fp_round>
    1078:	d1 d0       	rcall	.+418    	; 0x121c <__fp_pscA>
    107a:	30 f0       	brcs	.+12     	; 0x1088 <__addsf3+0x18>
    107c:	d6 d0       	rcall	.+428    	; 0x122a <__fp_pscB>
    107e:	20 f0       	brcs	.+8      	; 0x1088 <__addsf3+0x18>
    1080:	31 f4       	brne	.+12     	; 0x108e <__addsf3+0x1e>
    1082:	9f 3f       	cpi	r25, 0xFF	; 255
    1084:	11 f4       	brne	.+4      	; 0x108a <__addsf3+0x1a>
    1086:	1e f4       	brtc	.+6      	; 0x108e <__addsf3+0x1e>
    1088:	c6 c0       	rjmp	.+396    	; 0x1216 <__fp_nan>
    108a:	0e f4       	brtc	.+2      	; 0x108e <__addsf3+0x1e>
    108c:	e0 95       	com	r30
    108e:	e7 fb       	bst	r30, 7
    1090:	bc c0       	rjmp	.+376    	; 0x120a <__fp_inf>

00001092 <__addsf3x>:
    1092:	e9 2f       	mov	r30, r25
    1094:	e2 d0       	rcall	.+452    	; 0x125a <__fp_split3>
    1096:	80 f3       	brcs	.-32     	; 0x1078 <__addsf3+0x8>
    1098:	ba 17       	cp	r27, r26
    109a:	62 07       	cpc	r22, r18
    109c:	73 07       	cpc	r23, r19
    109e:	84 07       	cpc	r24, r20
    10a0:	95 07       	cpc	r25, r21
    10a2:	18 f0       	brcs	.+6      	; 0x10aa <__addsf3x+0x18>
    10a4:	71 f4       	brne	.+28     	; 0x10c2 <__addsf3x+0x30>
    10a6:	9e f5       	brtc	.+102    	; 0x110e <__addsf3x+0x7c>
    10a8:	fa c0       	rjmp	.+500    	; 0x129e <__fp_zero>
    10aa:	0e f4       	brtc	.+2      	; 0x10ae <__addsf3x+0x1c>
    10ac:	e0 95       	com	r30
    10ae:	0b 2e       	mov	r0, r27
    10b0:	ba 2f       	mov	r27, r26
    10b2:	a0 2d       	mov	r26, r0
    10b4:	0b 01       	movw	r0, r22
    10b6:	b9 01       	movw	r22, r18
    10b8:	90 01       	movw	r18, r0
    10ba:	0c 01       	movw	r0, r24
    10bc:	ca 01       	movw	r24, r20
    10be:	a0 01       	movw	r20, r0
    10c0:	11 24       	eor	r1, r1
    10c2:	ff 27       	eor	r31, r31
    10c4:	59 1b       	sub	r21, r25
    10c6:	99 f0       	breq	.+38     	; 0x10ee <__addsf3x+0x5c>
    10c8:	59 3f       	cpi	r21, 0xF9	; 249
    10ca:	50 f4       	brcc	.+20     	; 0x10e0 <__addsf3x+0x4e>
    10cc:	50 3e       	cpi	r21, 0xE0	; 224
    10ce:	68 f1       	brcs	.+90     	; 0x112a <__addsf3x+0x98>
    10d0:	1a 16       	cp	r1, r26
    10d2:	f0 40       	sbci	r31, 0x00	; 0
    10d4:	a2 2f       	mov	r26, r18
    10d6:	23 2f       	mov	r18, r19
    10d8:	34 2f       	mov	r19, r20
    10da:	44 27       	eor	r20, r20
    10dc:	58 5f       	subi	r21, 0xF8	; 248
    10de:	f3 cf       	rjmp	.-26     	; 0x10c6 <__addsf3x+0x34>
    10e0:	46 95       	lsr	r20
    10e2:	37 95       	ror	r19
    10e4:	27 95       	ror	r18
    10e6:	a7 95       	ror	r26
    10e8:	f0 40       	sbci	r31, 0x00	; 0
    10ea:	53 95       	inc	r21
    10ec:	c9 f7       	brne	.-14     	; 0x10e0 <__addsf3x+0x4e>
    10ee:	7e f4       	brtc	.+30     	; 0x110e <__addsf3x+0x7c>
    10f0:	1f 16       	cp	r1, r31
    10f2:	ba 0b       	sbc	r27, r26
    10f4:	62 0b       	sbc	r22, r18
    10f6:	73 0b       	sbc	r23, r19
    10f8:	84 0b       	sbc	r24, r20
    10fa:	ba f0       	brmi	.+46     	; 0x112a <__addsf3x+0x98>
    10fc:	91 50       	subi	r25, 0x01	; 1
    10fe:	a1 f0       	breq	.+40     	; 0x1128 <__addsf3x+0x96>
    1100:	ff 0f       	add	r31, r31
    1102:	bb 1f       	adc	r27, r27
    1104:	66 1f       	adc	r22, r22
    1106:	77 1f       	adc	r23, r23
    1108:	88 1f       	adc	r24, r24
    110a:	c2 f7       	brpl	.-16     	; 0x10fc <__addsf3x+0x6a>
    110c:	0e c0       	rjmp	.+28     	; 0x112a <__addsf3x+0x98>
    110e:	ba 0f       	add	r27, r26
    1110:	62 1f       	adc	r22, r18
    1112:	73 1f       	adc	r23, r19
    1114:	84 1f       	adc	r24, r20
    1116:	48 f4       	brcc	.+18     	; 0x112a <__addsf3x+0x98>
    1118:	87 95       	ror	r24
    111a:	77 95       	ror	r23
    111c:	67 95       	ror	r22
    111e:	b7 95       	ror	r27
    1120:	f7 95       	ror	r31
    1122:	9e 3f       	cpi	r25, 0xFE	; 254
    1124:	08 f0       	brcs	.+2      	; 0x1128 <__addsf3x+0x96>
    1126:	b3 cf       	rjmp	.-154    	; 0x108e <__addsf3+0x1e>
    1128:	93 95       	inc	r25
    112a:	88 0f       	add	r24, r24
    112c:	08 f0       	brcs	.+2      	; 0x1130 <__addsf3x+0x9e>
    112e:	99 27       	eor	r25, r25
    1130:	ee 0f       	add	r30, r30
    1132:	97 95       	ror	r25
    1134:	87 95       	ror	r24
    1136:	08 95       	ret

00001138 <__fixunssfsi>:
    1138:	98 d0       	rcall	.+304    	; 0x126a <__fp_splitA>
    113a:	88 f0       	brcs	.+34     	; 0x115e <__fixunssfsi+0x26>
    113c:	9f 57       	subi	r25, 0x7F	; 127
    113e:	90 f0       	brcs	.+36     	; 0x1164 <__fixunssfsi+0x2c>
    1140:	b9 2f       	mov	r27, r25
    1142:	99 27       	eor	r25, r25
    1144:	b7 51       	subi	r27, 0x17	; 23
    1146:	a0 f0       	brcs	.+40     	; 0x1170 <__fixunssfsi+0x38>
    1148:	d1 f0       	breq	.+52     	; 0x117e <__fixunssfsi+0x46>
    114a:	66 0f       	add	r22, r22
    114c:	77 1f       	adc	r23, r23
    114e:	88 1f       	adc	r24, r24
    1150:	99 1f       	adc	r25, r25
    1152:	1a f0       	brmi	.+6      	; 0x115a <__fixunssfsi+0x22>
    1154:	ba 95       	dec	r27
    1156:	c9 f7       	brne	.-14     	; 0x114a <__fixunssfsi+0x12>
    1158:	12 c0       	rjmp	.+36     	; 0x117e <__fixunssfsi+0x46>
    115a:	b1 30       	cpi	r27, 0x01	; 1
    115c:	81 f0       	breq	.+32     	; 0x117e <__fixunssfsi+0x46>
    115e:	9f d0       	rcall	.+318    	; 0x129e <__fp_zero>
    1160:	b1 e0       	ldi	r27, 0x01	; 1
    1162:	08 95       	ret
    1164:	9c c0       	rjmp	.+312    	; 0x129e <__fp_zero>
    1166:	67 2f       	mov	r22, r23
    1168:	78 2f       	mov	r23, r24
    116a:	88 27       	eor	r24, r24
    116c:	b8 5f       	subi	r27, 0xF8	; 248
    116e:	39 f0       	breq	.+14     	; 0x117e <__fixunssfsi+0x46>
    1170:	b9 3f       	cpi	r27, 0xF9	; 249
    1172:	cc f3       	brlt	.-14     	; 0x1166 <__fixunssfsi+0x2e>
    1174:	86 95       	lsr	r24
    1176:	77 95       	ror	r23
    1178:	67 95       	ror	r22
    117a:	b3 95       	inc	r27
    117c:	d9 f7       	brne	.-10     	; 0x1174 <__fixunssfsi+0x3c>
    117e:	3e f4       	brtc	.+14     	; 0x118e <__fixunssfsi+0x56>
    1180:	90 95       	com	r25
    1182:	80 95       	com	r24
    1184:	70 95       	com	r23
    1186:	61 95       	neg	r22
    1188:	7f 4f       	sbci	r23, 0xFF	; 255
    118a:	8f 4f       	sbci	r24, 0xFF	; 255
    118c:	9f 4f       	sbci	r25, 0xFF	; 255
    118e:	08 95       	ret

00001190 <__floatunsisf>:
    1190:	e8 94       	clt
    1192:	09 c0       	rjmp	.+18     	; 0x11a6 <__floatsisf+0x12>

00001194 <__floatsisf>:
    1194:	97 fb       	bst	r25, 7
    1196:	3e f4       	brtc	.+14     	; 0x11a6 <__floatsisf+0x12>
    1198:	90 95       	com	r25
    119a:	80 95       	com	r24
    119c:	70 95       	com	r23
    119e:	61 95       	neg	r22
    11a0:	7f 4f       	sbci	r23, 0xFF	; 255
    11a2:	8f 4f       	sbci	r24, 0xFF	; 255
    11a4:	9f 4f       	sbci	r25, 0xFF	; 255
    11a6:	99 23       	and	r25, r25
    11a8:	a9 f0       	breq	.+42     	; 0x11d4 <__floatsisf+0x40>
    11aa:	f9 2f       	mov	r31, r25
    11ac:	96 e9       	ldi	r25, 0x96	; 150
    11ae:	bb 27       	eor	r27, r27
    11b0:	93 95       	inc	r25
    11b2:	f6 95       	lsr	r31
    11b4:	87 95       	ror	r24
    11b6:	77 95       	ror	r23
    11b8:	67 95       	ror	r22
    11ba:	b7 95       	ror	r27
    11bc:	f1 11       	cpse	r31, r1
    11be:	f8 cf       	rjmp	.-16     	; 0x11b0 <__floatsisf+0x1c>
    11c0:	fa f4       	brpl	.+62     	; 0x1200 <__floatsisf+0x6c>
    11c2:	bb 0f       	add	r27, r27
    11c4:	11 f4       	brne	.+4      	; 0x11ca <__floatsisf+0x36>
    11c6:	60 ff       	sbrs	r22, 0
    11c8:	1b c0       	rjmp	.+54     	; 0x1200 <__floatsisf+0x6c>
    11ca:	6f 5f       	subi	r22, 0xFF	; 255
    11cc:	7f 4f       	sbci	r23, 0xFF	; 255
    11ce:	8f 4f       	sbci	r24, 0xFF	; 255
    11d0:	9f 4f       	sbci	r25, 0xFF	; 255
    11d2:	16 c0       	rjmp	.+44     	; 0x1200 <__floatsisf+0x6c>
    11d4:	88 23       	and	r24, r24
    11d6:	11 f0       	breq	.+4      	; 0x11dc <__floatsisf+0x48>
    11d8:	96 e9       	ldi	r25, 0x96	; 150
    11da:	11 c0       	rjmp	.+34     	; 0x11fe <__floatsisf+0x6a>
    11dc:	77 23       	and	r23, r23
    11de:	21 f0       	breq	.+8      	; 0x11e8 <__floatsisf+0x54>
    11e0:	9e e8       	ldi	r25, 0x8E	; 142
    11e2:	87 2f       	mov	r24, r23
    11e4:	76 2f       	mov	r23, r22
    11e6:	05 c0       	rjmp	.+10     	; 0x11f2 <__floatsisf+0x5e>
    11e8:	66 23       	and	r22, r22
    11ea:	71 f0       	breq	.+28     	; 0x1208 <__floatsisf+0x74>
    11ec:	96 e8       	ldi	r25, 0x86	; 134
    11ee:	86 2f       	mov	r24, r22
    11f0:	70 e0       	ldi	r23, 0x00	; 0
    11f2:	60 e0       	ldi	r22, 0x00	; 0
    11f4:	2a f0       	brmi	.+10     	; 0x1200 <__floatsisf+0x6c>
    11f6:	9a 95       	dec	r25
    11f8:	66 0f       	add	r22, r22
    11fa:	77 1f       	adc	r23, r23
    11fc:	88 1f       	adc	r24, r24
    11fe:	da f7       	brpl	.-10     	; 0x11f6 <__floatsisf+0x62>
    1200:	88 0f       	add	r24, r24
    1202:	96 95       	lsr	r25
    1204:	87 95       	ror	r24
    1206:	97 f9       	bld	r25, 7
    1208:	08 95       	ret

0000120a <__fp_inf>:
    120a:	97 f9       	bld	r25, 7
    120c:	9f 67       	ori	r25, 0x7F	; 127
    120e:	80 e8       	ldi	r24, 0x80	; 128
    1210:	70 e0       	ldi	r23, 0x00	; 0
    1212:	60 e0       	ldi	r22, 0x00	; 0
    1214:	08 95       	ret

00001216 <__fp_nan>:
    1216:	9f ef       	ldi	r25, 0xFF	; 255
    1218:	80 ec       	ldi	r24, 0xC0	; 192
    121a:	08 95       	ret

0000121c <__fp_pscA>:
    121c:	00 24       	eor	r0, r0
    121e:	0a 94       	dec	r0
    1220:	16 16       	cp	r1, r22
    1222:	17 06       	cpc	r1, r23
    1224:	18 06       	cpc	r1, r24
    1226:	09 06       	cpc	r0, r25
    1228:	08 95       	ret

0000122a <__fp_pscB>:
    122a:	00 24       	eor	r0, r0
    122c:	0a 94       	dec	r0
    122e:	12 16       	cp	r1, r18
    1230:	13 06       	cpc	r1, r19
    1232:	14 06       	cpc	r1, r20
    1234:	05 06       	cpc	r0, r21
    1236:	08 95       	ret

00001238 <__fp_round>:
    1238:	09 2e       	mov	r0, r25
    123a:	03 94       	inc	r0
    123c:	00 0c       	add	r0, r0
    123e:	11 f4       	brne	.+4      	; 0x1244 <__fp_round+0xc>
    1240:	88 23       	and	r24, r24
    1242:	52 f0       	brmi	.+20     	; 0x1258 <__fp_round+0x20>
    1244:	bb 0f       	add	r27, r27
    1246:	40 f4       	brcc	.+16     	; 0x1258 <__fp_round+0x20>
    1248:	bf 2b       	or	r27, r31
    124a:	11 f4       	brne	.+4      	; 0x1250 <__fp_round+0x18>
    124c:	60 ff       	sbrs	r22, 0
    124e:	04 c0       	rjmp	.+8      	; 0x1258 <__fp_round+0x20>
    1250:	6f 5f       	subi	r22, 0xFF	; 255
    1252:	7f 4f       	sbci	r23, 0xFF	; 255
    1254:	8f 4f       	sbci	r24, 0xFF	; 255
    1256:	9f 4f       	sbci	r25, 0xFF	; 255
    1258:	08 95       	ret

0000125a <__fp_split3>:
    125a:	57 fd       	sbrc	r21, 7
    125c:	90 58       	subi	r25, 0x80	; 128
    125e:	44 0f       	add	r20, r20
    1260:	55 1f       	adc	r21, r21
    1262:	59 f0       	breq	.+22     	; 0x127a <__fp_splitA+0x10>
    1264:	5f 3f       	cpi	r21, 0xFF	; 255
    1266:	71 f0       	breq	.+28     	; 0x1284 <__fp_splitA+0x1a>
    1268:	47 95       	ror	r20

0000126a <__fp_splitA>:
    126a:	88 0f       	add	r24, r24
    126c:	97 fb       	bst	r25, 7
    126e:	99 1f       	adc	r25, r25
    1270:	61 f0       	breq	.+24     	; 0x128a <__fp_splitA+0x20>
    1272:	9f 3f       	cpi	r25, 0xFF	; 255
    1274:	79 f0       	breq	.+30     	; 0x1294 <__fp_splitA+0x2a>
    1276:	87 95       	ror	r24
    1278:	08 95       	ret
    127a:	12 16       	cp	r1, r18
    127c:	13 06       	cpc	r1, r19
    127e:	14 06       	cpc	r1, r20
    1280:	55 1f       	adc	r21, r21
    1282:	f2 cf       	rjmp	.-28     	; 0x1268 <__fp_split3+0xe>
    1284:	46 95       	lsr	r20
    1286:	f1 df       	rcall	.-30     	; 0x126a <__fp_splitA>
    1288:	08 c0       	rjmp	.+16     	; 0x129a <__fp_splitA+0x30>
    128a:	16 16       	cp	r1, r22
    128c:	17 06       	cpc	r1, r23
    128e:	18 06       	cpc	r1, r24
    1290:	99 1f       	adc	r25, r25
    1292:	f1 cf       	rjmp	.-30     	; 0x1276 <__fp_splitA+0xc>
    1294:	86 95       	lsr	r24
    1296:	71 05       	cpc	r23, r1
    1298:	61 05       	cpc	r22, r1
    129a:	08 94       	sec
    129c:	08 95       	ret

0000129e <__fp_zero>:
    129e:	e8 94       	clt

000012a0 <__fp_szero>:
    12a0:	bb 27       	eor	r27, r27
    12a2:	66 27       	eor	r22, r22
    12a4:	77 27       	eor	r23, r23
    12a6:	cb 01       	movw	r24, r22
    12a8:	97 f9       	bld	r25, 7
    12aa:	08 95       	ret

000012ac <__gesf2>:
    12ac:	66 d0       	rcall	.+204    	; 0x137a <__fp_cmp>
    12ae:	08 f4       	brcc	.+2      	; 0x12b2 <__gesf2+0x6>
    12b0:	8f ef       	ldi	r24, 0xFF	; 255
    12b2:	08 95       	ret

000012b4 <__mulsf3>:
    12b4:	0b d0       	rcall	.+22     	; 0x12cc <__mulsf3x>
    12b6:	c0 cf       	rjmp	.-128    	; 0x1238 <__fp_round>
    12b8:	b1 df       	rcall	.-158    	; 0x121c <__fp_pscA>
    12ba:	28 f0       	brcs	.+10     	; 0x12c6 <__mulsf3+0x12>
    12bc:	b6 df       	rcall	.-148    	; 0x122a <__fp_pscB>
    12be:	18 f0       	brcs	.+6      	; 0x12c6 <__mulsf3+0x12>
    12c0:	95 23       	and	r25, r21
    12c2:	09 f0       	breq	.+2      	; 0x12c6 <__mulsf3+0x12>
    12c4:	a2 cf       	rjmp	.-188    	; 0x120a <__fp_inf>
    12c6:	a7 cf       	rjmp	.-178    	; 0x1216 <__fp_nan>
    12c8:	11 24       	eor	r1, r1
    12ca:	ea cf       	rjmp	.-44     	; 0x12a0 <__fp_szero>

000012cc <__mulsf3x>:
    12cc:	c6 df       	rcall	.-116    	; 0x125a <__fp_split3>
    12ce:	a0 f3       	brcs	.-24     	; 0x12b8 <__mulsf3+0x4>

000012d0 <__mulsf3_pse>:
    12d0:	95 9f       	mul	r25, r21
    12d2:	d1 f3       	breq	.-12     	; 0x12c8 <__mulsf3+0x14>
    12d4:	95 0f       	add	r25, r21
    12d6:	50 e0       	ldi	r21, 0x00	; 0
    12d8:	55 1f       	adc	r21, r21
    12da:	62 9f       	mul	r22, r18
    12dc:	f0 01       	movw	r30, r0
    12de:	72 9f       	mul	r23, r18
    12e0:	bb 27       	eor	r27, r27
    12e2:	f0 0d       	add	r31, r0
    12e4:	b1 1d       	adc	r27, r1
    12e6:	63 9f       	mul	r22, r19
    12e8:	aa 27       	eor	r26, r26
    12ea:	f0 0d       	add	r31, r0
    12ec:	b1 1d       	adc	r27, r1
    12ee:	aa 1f       	adc	r26, r26
    12f0:	64 9f       	mul	r22, r20
    12f2:	66 27       	eor	r22, r22
    12f4:	b0 0d       	add	r27, r0
    12f6:	a1 1d       	adc	r26, r1
    12f8:	66 1f       	adc	r22, r22
    12fa:	82 9f       	mul	r24, r18
    12fc:	22 27       	eor	r18, r18
    12fe:	b0 0d       	add	r27, r0
    1300:	a1 1d       	adc	r26, r1
    1302:	62 1f       	adc	r22, r18
    1304:	73 9f       	mul	r23, r19
    1306:	b0 0d       	add	r27, r0
    1308:	a1 1d       	adc	r26, r1
    130a:	62 1f       	adc	r22, r18
    130c:	83 9f       	mul	r24, r19
    130e:	a0 0d       	add	r26, r0
    1310:	61 1d       	adc	r22, r1
    1312:	22 1f       	adc	r18, r18
    1314:	74 9f       	mul	r23, r20
    1316:	33 27       	eor	r19, r19
    1318:	a0 0d       	add	r26, r0
    131a:	61 1d       	adc	r22, r1
    131c:	23 1f       	adc	r18, r19
    131e:	84 9f       	mul	r24, r20
    1320:	60 0d       	add	r22, r0
    1322:	21 1d       	adc	r18, r1
    1324:	82 2f       	mov	r24, r18
    1326:	76 2f       	mov	r23, r22
    1328:	6a 2f       	mov	r22, r26
    132a:	11 24       	eor	r1, r1
    132c:	9f 57       	subi	r25, 0x7F	; 127
    132e:	50 40       	sbci	r21, 0x00	; 0
    1330:	8a f0       	brmi	.+34     	; 0x1354 <__mulsf3_pse+0x84>
    1332:	e1 f0       	breq	.+56     	; 0x136c <__mulsf3_pse+0x9c>
    1334:	88 23       	and	r24, r24
    1336:	4a f0       	brmi	.+18     	; 0x134a <__mulsf3_pse+0x7a>
    1338:	ee 0f       	add	r30, r30
    133a:	ff 1f       	adc	r31, r31
    133c:	bb 1f       	adc	r27, r27
    133e:	66 1f       	adc	r22, r22
    1340:	77 1f       	adc	r23, r23
    1342:	88 1f       	adc	r24, r24
    1344:	91 50       	subi	r25, 0x01	; 1
    1346:	50 40       	sbci	r21, 0x00	; 0
    1348:	a9 f7       	brne	.-22     	; 0x1334 <__mulsf3_pse+0x64>
    134a:	9e 3f       	cpi	r25, 0xFE	; 254
    134c:	51 05       	cpc	r21, r1
    134e:	70 f0       	brcs	.+28     	; 0x136c <__mulsf3_pse+0x9c>
    1350:	5c cf       	rjmp	.-328    	; 0x120a <__fp_inf>
    1352:	a6 cf       	rjmp	.-180    	; 0x12a0 <__fp_szero>
    1354:	5f 3f       	cpi	r21, 0xFF	; 255
    1356:	ec f3       	brlt	.-6      	; 0x1352 <__mulsf3_pse+0x82>
    1358:	98 3e       	cpi	r25, 0xE8	; 232
    135a:	dc f3       	brlt	.-10     	; 0x1352 <__mulsf3_pse+0x82>
    135c:	86 95       	lsr	r24
    135e:	77 95       	ror	r23
    1360:	67 95       	ror	r22
    1362:	b7 95       	ror	r27
    1364:	f7 95       	ror	r31
    1366:	e7 95       	ror	r30
    1368:	9f 5f       	subi	r25, 0xFF	; 255
    136a:	c1 f7       	brne	.-16     	; 0x135c <__mulsf3_pse+0x8c>
    136c:	fe 2b       	or	r31, r30
    136e:	88 0f       	add	r24, r24
    1370:	91 1d       	adc	r25, r1
    1372:	96 95       	lsr	r25
    1374:	87 95       	ror	r24
    1376:	97 f9       	bld	r25, 7
    1378:	08 95       	ret

0000137a <__fp_cmp>:
    137a:	99 0f       	add	r25, r25
    137c:	00 08       	sbc	r0, r0
    137e:	55 0f       	add	r21, r21
    1380:	aa 0b       	sbc	r26, r26
    1382:	e0 e8       	ldi	r30, 0x80	; 128
    1384:	fe ef       	ldi	r31, 0xFE	; 254
    1386:	16 16       	cp	r1, r22
    1388:	17 06       	cpc	r1, r23
    138a:	e8 07       	cpc	r30, r24
    138c:	f9 07       	cpc	r31, r25
    138e:	c0 f0       	brcs	.+48     	; 0x13c0 <__fp_cmp+0x46>
    1390:	12 16       	cp	r1, r18
    1392:	13 06       	cpc	r1, r19
    1394:	e4 07       	cpc	r30, r20
    1396:	f5 07       	cpc	r31, r21
    1398:	98 f0       	brcs	.+38     	; 0x13c0 <__fp_cmp+0x46>
    139a:	62 1b       	sub	r22, r18
    139c:	73 0b       	sbc	r23, r19
    139e:	84 0b       	sbc	r24, r20
    13a0:	95 0b       	sbc	r25, r21
    13a2:	39 f4       	brne	.+14     	; 0x13b2 <__fp_cmp+0x38>
    13a4:	0a 26       	eor	r0, r26
    13a6:	61 f0       	breq	.+24     	; 0x13c0 <__fp_cmp+0x46>
    13a8:	23 2b       	or	r18, r19
    13aa:	24 2b       	or	r18, r20
    13ac:	25 2b       	or	r18, r21
    13ae:	21 f4       	brne	.+8      	; 0x13b8 <__fp_cmp+0x3e>
    13b0:	08 95       	ret
    13b2:	0a 26       	eor	r0, r26
    13b4:	09 f4       	brne	.+2      	; 0x13b8 <__fp_cmp+0x3e>
    13b6:	a1 40       	sbci	r26, 0x01	; 1
    13b8:	a6 95       	lsr	r26
    13ba:	8f ef       	ldi	r24, 0xFF	; 255
    13bc:	81 1d       	adc	r24, r1
    13be:	81 1d       	adc	r24, r1
    13c0:	08 95       	ret

000013c2 <__mulsi3>:
    13c2:	62 9f       	mul	r22, r18
    13c4:	d0 01       	movw	r26, r0
    13c6:	73 9f       	mul	r23, r19
    13c8:	f0 01       	movw	r30, r0
    13ca:	82 9f       	mul	r24, r18
    13cc:	e0 0d       	add	r30, r0
    13ce:	f1 1d       	adc	r31, r1
    13d0:	64 9f       	mul	r22, r20
    13d2:	e0 0d       	add	r30, r0
    13d4:	f1 1d       	adc	r31, r1
    13d6:	92 9f       	mul	r25, r18
    13d8:	f0 0d       	add	r31, r0
    13da:	83 9f       	mul	r24, r19
    13dc:	f0 0d       	add	r31, r0
    13de:	74 9f       	mul	r23, r20
    13e0:	f0 0d       	add	r31, r0
    13e2:	65 9f       	mul	r22, r21
    13e4:	f0 0d       	add	r31, r0
    13e6:	99 27       	eor	r25, r25
    13e8:	72 9f       	mul	r23, r18
    13ea:	b0 0d       	add	r27, r0
    13ec:	e1 1d       	adc	r30, r1
    13ee:	f9 1f       	adc	r31, r25
    13f0:	63 9f       	mul	r22, r19
    13f2:	b0 0d       	add	r27, r0
    13f4:	e1 1d       	adc	r30, r1
    13f6:	f9 1f       	adc	r31, r25
    13f8:	bd 01       	movw	r22, r26
    13fa:	cf 01       	movw	r24, r30
    13fc:	11 24       	eor	r1, r1
    13fe:	08 95       	ret

00001400 <__udivmodhi4>:
    1400:	aa 1b       	sub	r26, r26
    1402:	bb 1b       	sub	r27, r27
    1404:	51 e1       	ldi	r21, 0x11	; 17
    1406:	07 c0       	rjmp	.+14     	; 0x1416 <__udivmodhi4_ep>

00001408 <__udivmodhi4_loop>:
    1408:	aa 1f       	adc	r26, r26
    140a:	bb 1f       	adc	r27, r27
    140c:	a6 17       	cp	r26, r22
    140e:	b7 07       	cpc	r27, r23
    1410:	10 f0       	brcs	.+4      	; 0x1416 <__udivmodhi4_ep>
    1412:	a6 1b       	sub	r26, r22
    1414:	b7 0b       	sbc	r27, r23

00001416 <__udivmodhi4_ep>:
    1416:	88 1f       	adc	r24, r24
    1418:	99 1f       	adc	r25, r25
    141a:	5a 95       	dec	r21
    141c:	a9 f7       	brne	.-22     	; 0x1408 <__udivmodhi4_loop>
    141e:	80 95       	com	r24
    1420:	90 95       	com	r25
    1422:	bc 01       	movw	r22, r24
    1424:	cd 01       	movw	r24, r26
    1426:	08 95       	ret

00001428 <__udivmodsi4>:
    1428:	a1 e2       	ldi	r26, 0x21	; 33
    142a:	1a 2e       	mov	r1, r26
    142c:	aa 1b       	sub	r26, r26
    142e:	bb 1b       	sub	r27, r27
    1430:	fd 01       	movw	r30, r26
    1432:	0d c0       	rjmp	.+26     	; 0x144e <__udivmodsi4_ep>

00001434 <__udivmodsi4_loop>:
    1434:	aa 1f       	adc	r26, r26
    1436:	bb 1f       	adc	r27, r27
    1438:	ee 1f       	adc	r30, r30
    143a:	ff 1f       	adc	r31, r31
    143c:	a2 17       	cp	r26, r18
    143e:	b3 07       	cpc	r27, r19
    1440:	e4 07       	cpc	r30, r20
    1442:	f5 07       	cpc	r31, r21
    1444:	20 f0       	brcs	.+8      	; 0x144e <__udivmodsi4_ep>
    1446:	a2 1b       	sub	r26, r18
    1448:	b3 0b       	sbc	r27, r19
    144a:	e4 0b       	sbc	r30, r20
    144c:	f5 0b       	sbc	r31, r21

0000144e <__udivmodsi4_ep>:
    144e:	66 1f       	adc	r22, r22
    1450:	77 1f       	adc	r23, r23
    1452:	88 1f       	adc	r24, r24
    1454:	99 1f       	adc	r25, r25
    1456:	1a 94       	dec	r1
    1458:	69 f7       	brne	.-38     	; 0x1434 <__udivmodsi4_loop>
    145a:	60 95       	com	r22
    145c:	70 95       	com	r23
    145e:	80 95       	com	r24
    1460:	90 95       	com	r25
    1462:	9b 01       	movw	r18, r22
    1464:	ac 01       	movw	r20, r24
    1466:	bd 01       	movw	r22, r26
    1468:	cf 01       	movw	r24, r30
    146a:	08 95       	ret

0000146c <_exit>:
    146c:	f8 94       	cli

0000146e <__stop_program>:
    146e:	ff cf       	rjmp	.-2      	; 0x146e <__stop_program>
